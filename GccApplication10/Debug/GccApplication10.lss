
GccApplication10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  00001092  00001126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001092  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800186  00800186  000011ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  0000121c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000037d5  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ee  00000000  00000000  00004ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001458  00000000  00000000  000054bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00006918  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065c  00000000  00000000  00006b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001087  00000000  00000000  000071d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00008257  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
      22:	00 00       	nop
      24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
      26:	00 00       	nop
      28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
      32:	00 00       	nop
      34:	bd c0       	rjmp	.+378    	; 0x1b0 <__vector_13>
      36:	00 00       	nop
      38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
      42:	00 00       	nop
      44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
      46:	00 00       	nop
      48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
      66:	00 00       	nop
      68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
      76:	00 00       	nop
      78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e9       	ldi	r30, 0x92	; 146
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 38       	cpi	r26, 0x86	; 134
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a6 e8       	ldi	r26, 0x86	; 134
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 39       	cpi	r26, 0x90	; 144
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	bf d7       	rcall	.+3966   	; 0x1042 <main>
      c4:	e4 c7       	rjmp	.+4040   	; 0x108e <_exit>

000000c6 <__bad_interrupt>:
      c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
      c8:	18 16       	cp	r1, r24
      ca:	19 06       	cpc	r1, r25
      cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
      ce:	08 95       	ret
      d0:	00 00       	nop
      d2:	21 50       	subi	r18, 0x01	; 1
      d4:	31 09       	sbc	r19, r1
      d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
      d8:	4f 5f       	subi	r20, 0xFF	; 255
      da:	5f 4f       	sbci	r21, 0xFF	; 255
      dc:	84 17       	cp	r24, r20
      de:	95 07       	cpc	r25, r21
      e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
      e2:	08 95       	ret
      e4:	40 e0       	ldi	r20, 0x00	; 0
      e6:	50 e0       	ldi	r21, 0x00	; 0
      e8:	27 e0       	ldi	r18, 0x07	; 7
      ea:	33 e0       	ldi	r19, 0x03	; 3
      ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
      ee:	28 98       	cbi	0x05, 0	; 5
      f0:	8b b9       	out	0x0b, r24	; 11
      f2:	29 9a       	sbi	0x05, 1	; 5
      f4:	00 00       	nop
      f6:	29 98       	cbi	0x05, 1	; 5
      f8:	82 e0       	ldi	r24, 0x02	; 2
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
      fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
     104:	08 95       	ret

00000106 <LCD_Cursor>:
     106:	81 31       	cpi	r24, 0x11	; 17
     108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
     10a:	81 58       	subi	r24, 0x81	; 129
     10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
     10e:	08 95       	ret
     110:	81 55       	subi	r24, 0x51	; 81
     112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
     114:	08 95       	ret

00000116 <LCD_init>:
     116:	84 e6       	ldi	r24, 0x64	; 100
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
     11c:	88 e3       	ldi	r24, 0x38	; 56
     11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
     120:	86 e0       	ldi	r24, 0x06	; 6
     122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
     124:	8f e0       	ldi	r24, 0x0F	; 15
     126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
     12c:	8a e0       	ldi	r24, 0x0A	; 10
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
     132:	08 95       	ret

00000134 <LCD_WriteData>:
     134:	28 9a       	sbi	0x05, 0	; 5
     136:	8b b9       	out	0x0b, r24	; 11
     138:	29 9a       	sbi	0x05, 1	; 5
     13a:	00 00       	nop
     13c:	29 98       	cbi	0x05, 1	; 5
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
     144:	08 95       	ret

00000146 <TimerSet>:
     146:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_avr_timer_M>
     14a:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_avr_timer_M+0x1>
     14e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M+0x2>
     152:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x3>
     156:	60 93 89 01 	sts	0x0189, r22	; 0x800189 <_avr_timer_cntcurr>
     15a:	70 93 8a 01 	sts	0x018A, r23	; 0x80018a <_avr_timer_cntcurr+0x1>
     15e:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <_avr_timer_cntcurr+0x2>
     162:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <_avr_timer_cntcurr+0x3>
     166:	08 95       	ret

00000168 <TimerOn>:
     168:	8b e0       	ldi	r24, 0x0B	; 11
     16a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     16e:	8d e7       	ldi	r24, 0x7D	; 125
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     176:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     17a:	82 e0       	ldi	r24, 0x02	; 2
     17c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     180:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     184:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     188:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
     18c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
     190:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
     194:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
     198:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <_avr_timer_cntcurr>
     19c:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <_avr_timer_cntcurr+0x1>
     1a0:	a0 93 8b 01 	sts	0x018B, r26	; 0x80018b <_avr_timer_cntcurr+0x2>
     1a4:	b0 93 8c 01 	sts	0x018C, r27	; 0x80018c <_avr_timer_cntcurr+0x3>
     1a8:	8f b7       	in	r24, 0x3f	; 63
     1aa:	80 68       	ori	r24, 0x80	; 128
     1ac:	8f bf       	out	0x3f, r24	; 63
     1ae:	08 95       	ret

000001b0 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
     1b0:	1f 92       	push	r1
     1b2:	0f 92       	push	r0
     1b4:	0f b6       	in	r0, 0x3f	; 63
     1b6:	0f 92       	push	r0
     1b8:	11 24       	eor	r1, r1
     1ba:	8f 93       	push	r24
     1bc:	9f 93       	push	r25
     1be:	af 93       	push	r26
     1c0:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
     1c2:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <_avr_timer_cntcurr>
     1c6:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <_avr_timer_cntcurr+0x1>
     1ca:	a0 91 8b 01 	lds	r26, 0x018B	; 0x80018b <_avr_timer_cntcurr+0x2>
     1ce:	b0 91 8c 01 	lds	r27, 0x018C	; 0x80018c <_avr_timer_cntcurr+0x3>
     1d2:	01 97       	sbiw	r24, 0x01	; 1
     1d4:	a1 09       	sbc	r26, r1
     1d6:	b1 09       	sbc	r27, r1
     1d8:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <_avr_timer_cntcurr>
     1dc:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <_avr_timer_cntcurr+0x1>
     1e0:	a0 93 8b 01 	sts	0x018B, r26	; 0x80018b <_avr_timer_cntcurr+0x2>
     1e4:	b0 93 8c 01 	sts	0x018C, r27	; 0x80018c <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
     1e8:	89 2b       	or	r24, r25
     1ea:	8a 2b       	or	r24, r26
     1ec:	8b 2b       	or	r24, r27
     1ee:	99 f4       	brne	.+38     	; 0x216 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
     1f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
     1fa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
     1fe:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
     202:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
     206:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <_avr_timer_cntcurr>
     20a:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <_avr_timer_cntcurr+0x1>
     20e:	a0 93 8b 01 	sts	0x018B, r26	; 0x80018b <_avr_timer_cntcurr+0x2>
     212:	b0 93 8c 01 	sts	0x018C, r27	; 0x80018c <_avr_timer_cntcurr+0x3>
	}
}
     216:	bf 91       	pop	r27
     218:	af 91       	pop	r26
     21a:	9f 91       	pop	r25
     21c:	8f 91       	pop	r24
     21e:	0f 90       	pop	r0
     220:	0f be       	out	0x3f, r0	; 63
     222:	0f 90       	pop	r0
     224:	1f 90       	pop	r1
     226:	18 95       	reti

00000228 <LCD_Custom_Char>:
	LCD_Cursor(cur++);
	LCD_WriteData(' ');
	LCD_Cursor(cur++);
	LCD_WriteData(' ');
}
void LCD_Custom_Char (unsigned char loc, unsigned char *msg){
     228:	0f 93       	push	r16
     22a:	1f 93       	push	r17
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	8b 01       	movw	r16, r22
	int i;
	LCD_WriteCommand (0x40 + (loc*8));	/* Command 0x40 for CGRAM */
     232:	88 0f       	add	r24, r24
     234:	88 0f       	add	r24, r24
     236:	88 0f       	add	r24, r24
     238:	80 5c       	subi	r24, 0xC0	; 192
     23a:	59 df       	rcall	.-334    	; 0xee <LCD_WriteCommand>
     23c:	e8 01       	movw	r28, r16
     23e:	08 5f       	subi	r16, 0xF8	; 248
     240:	1f 4f       	sbci	r17, 0xFF	; 255
	for(i = 0;i < 8; i++)	/* 7 cause the bottom is reserved for the cursor */
		LCD_WriteData(msg[i]);
     242:	89 91       	ld	r24, Y+
     244:	77 df       	rcall	.-274    	; 0x134 <LCD_WriteData>
	LCD_WriteData(' ');
}
void LCD_Custom_Char (unsigned char loc, unsigned char *msg){
	int i;
	LCD_WriteCommand (0x40 + (loc*8));	/* Command 0x40 for CGRAM */
	for(i = 0;i < 8; i++)	/* 7 cause the bottom is reserved for the cursor */
     246:	c0 17       	cp	r28, r16
     248:	d1 07       	cpc	r29, r17
		LCD_WriteData(msg[i]);
	LCD_WriteCommand(0x80);
     24a:	d9 f7       	brne	.-10     	; 0x242 <LCD_Custom_Char+0x1a>
     24c:	80 e8       	ldi	r24, 0x80	; 128
     24e:	4f df       	rcall	.-354    	; 0xee <LCD_WriteCommand>
}
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	1f 91       	pop	r17
     256:	0f 91       	pop	r16
     258:	08 95       	ret

0000025a <dispDifEasy>:
				dispDifHard();
			}
		break;
	}
}
void dispDifEasy(){
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
     262:	a0 97       	sbiw	r28, 0x20	; 32
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	f8 94       	cli
     268:	de bf       	out	0x3e, r29	; 62
     26a:	0f be       	out	0x3f, r0	; 63
     26c:	cd bf       	out	0x3d, r28	; 61
	// EASY highlighted in the top left
	
	unsigned char selE[8] = {0x1f, 0x11, 0x17, 0x13, 0x17, 0x11, 0x1f, 0x00};
     26e:	88 e0       	ldi	r24, 0x08	; 8
     270:	e6 e0       	ldi	r30, 0x06	; 6
     272:	f1 e0       	ldi	r31, 0x01	; 1
     274:	de 01       	movw	r26, r28
     276:	11 96       	adiw	r26, 0x01	; 1
     278:	01 90       	ld	r0, Z+
     27a:	0d 92       	st	X+, r0
     27c:	8a 95       	dec	r24
     27e:	e1 f7       	brne	.-8      	; 0x278 <dispDifEasy+0x1e>
	unsigned char selA[8] = {0x1f, 0x1b, 0x15, 0x11, 0x15, 0x15, 0x1f, 0x00};
     280:	88 e0       	ldi	r24, 0x08	; 8
     282:	ee e0       	ldi	r30, 0x0E	; 14
     284:	f1 e0       	ldi	r31, 0x01	; 1
     286:	de 01       	movw	r26, r28
     288:	19 96       	adiw	r26, 0x09	; 9
     28a:	01 90       	ld	r0, Z+
     28c:	0d 92       	st	X+, r0
     28e:	8a 95       	dec	r24
     290:	e1 f7       	brne	.-8      	; 0x28a <dispDifEasy+0x30>
	unsigned char selS[8] = {0x1f, 0x11, 0x17, 0x11, 0x1d, 0x11, 0x1f, 0x00};	
     292:	88 e0       	ldi	r24, 0x08	; 8
     294:	e6 e1       	ldi	r30, 0x16	; 22
     296:	f1 e0       	ldi	r31, 0x01	; 1
     298:	de 01       	movw	r26, r28
     29a:	51 96       	adiw	r26, 0x11	; 17
     29c:	01 90       	ld	r0, Z+
     29e:	0d 92       	st	X+, r0
     2a0:	8a 95       	dec	r24
     2a2:	e1 f7       	brne	.-8      	; 0x29c <dispDifEasy+0x42>
	unsigned char selY[8] = {0x1f, 0x15, 0x15, 0x1b, 0x1b, 0x1b, 0x1f, 0x00};	
     2a4:	88 e0       	ldi	r24, 0x08	; 8
     2a6:	ee e1       	ldi	r30, 0x1E	; 30
     2a8:	f1 e0       	ldi	r31, 0x01	; 1
     2aa:	de 01       	movw	r26, r28
     2ac:	59 96       	adiw	r26, 0x19	; 25
     2ae:	01 90       	ld	r0, Z+
     2b0:	0d 92       	st	X+, r0
     2b2:	8a 95       	dec	r24
     2b4:	e1 f7       	brne	.-8      	; 0x2ae <dispDifEasy+0x54>
		
	LCD_Custom_Char(0, selE);		// build at position 0...
     2b6:	be 01       	movw	r22, r28
     2b8:	6f 5f       	subi	r22, 0xFF	; 255
     2ba:	7f 4f       	sbci	r23, 0xFF	; 255
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	b4 df       	rcall	.-152    	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(1, selA);
     2c0:	be 01       	movw	r22, r28
     2c2:	67 5f       	subi	r22, 0xF7	; 247
     2c4:	7f 4f       	sbci	r23, 0xFF	; 255
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	af df       	rcall	.-162    	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(2, selS);
     2ca:	be 01       	movw	r22, r28
     2cc:	6f 5e       	subi	r22, 0xEF	; 239
     2ce:	7f 4f       	sbci	r23, 0xFF	; 255
     2d0:	82 e0       	ldi	r24, 0x02	; 2
     2d2:	aa df       	rcall	.-172    	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(3, selY);
     2d4:	be 01       	movw	r22, r28
     2d6:	67 5e       	subi	r22, 0xE7	; 231
     2d8:	7f 4f       	sbci	r23, 0xFF	; 255
     2da:	83 e0       	ldi	r24, 0x03	; 3
	
	unsigned char cur = 1;		// initialize cursor to 1
	
	LCD_Cursor(cur++);
     2dc:	a5 df       	rcall	.-182    	; 0x228 <LCD_Custom_Char>
     2de:	81 e0       	ldi	r24, 0x01	; 1
	LCD_WriteData(0);
     2e0:	12 df       	rcall	.-476    	; 0x106 <LCD_Cursor>
     2e2:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Cursor(cur++);
     2e4:	27 df       	rcall	.-434    	; 0x134 <LCD_WriteData>
     2e6:	82 e0       	ldi	r24, 0x02	; 2
	LCD_WriteData(1);
     2e8:	0e df       	rcall	.-484    	; 0x106 <LCD_Cursor>
     2ea:	81 e0       	ldi	r24, 0x01	; 1
	LCD_Cursor(cur++);
     2ec:	23 df       	rcall	.-442    	; 0x134 <LCD_WriteData>
     2ee:	83 e0       	ldi	r24, 0x03	; 3
	LCD_WriteData(2);
     2f0:	0a df       	rcall	.-492    	; 0x106 <LCD_Cursor>
     2f2:	82 e0       	ldi	r24, 0x02	; 2
	LCD_Cursor(cur++);
     2f4:	1f df       	rcall	.-450    	; 0x134 <LCD_WriteData>
     2f6:	84 e0       	ldi	r24, 0x04	; 4
	LCD_WriteData(3);
     2f8:	06 df       	rcall	.-500    	; 0x106 <LCD_Cursor>
     2fa:	83 e0       	ldi	r24, 0x03	; 3
	LCD_Cursor(cur++);
     2fc:	1b df       	rcall	.-458    	; 0x134 <LCD_WriteData>
     2fe:	85 e0       	ldi	r24, 0x05	; 5
	LCD_WriteData(' ');	
     300:	02 df       	rcall	.-508    	; 0x106 <LCD_Cursor>
     302:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     304:	17 df       	rcall	.-466    	; 0x134 <LCD_WriteData>
     306:	86 e0       	ldi	r24, 0x06	; 6
	LCD_WriteData(' ');
     308:	fe de       	rcall	.-516    	; 0x106 <LCD_Cursor>
     30a:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     30c:	13 df       	rcall	.-474    	; 0x134 <LCD_WriteData>
     30e:	87 e0       	ldi	r24, 0x07	; 7
	LCD_WriteData(' ');
     310:	fa de       	rcall	.-524    	; 0x106 <LCD_Cursor>
     312:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     314:	0f df       	rcall	.-482    	; 0x134 <LCD_WriteData>
     316:	88 e0       	ldi	r24, 0x08	; 8
	LCD_WriteData(' ');
     318:	f6 de       	rcall	.-532    	; 0x106 <LCD_Cursor>
     31a:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     31c:	0b df       	rcall	.-490    	; 0x134 <LCD_WriteData>
     31e:	89 e0       	ldi	r24, 0x09	; 9
	LCD_WriteData(' ');
     320:	f2 de       	rcall	.-540    	; 0x106 <LCD_Cursor>
     322:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     324:	07 df       	rcall	.-498    	; 0x134 <LCD_WriteData>
     326:	8a e0       	ldi	r24, 0x0A	; 10
	LCD_WriteData(' ');
     328:	ee de       	rcall	.-548    	; 0x106 <LCD_Cursor>
     32a:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     32c:	03 df       	rcall	.-506    	; 0x134 <LCD_WriteData>
     32e:	8b e0       	ldi	r24, 0x0B	; 11
	LCD_WriteData('M');
     330:	ea de       	rcall	.-556    	; 0x106 <LCD_Cursor>
     332:	8d e4       	ldi	r24, 0x4D	; 77
	LCD_Cursor(cur++);
     334:	ff de       	rcall	.-514    	; 0x134 <LCD_WriteData>
     336:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_WriteData('E');
     338:	e6 de       	rcall	.-564    	; 0x106 <LCD_Cursor>
     33a:	85 e4       	ldi	r24, 0x45	; 69
	LCD_Cursor(cur++);
     33c:	fb de       	rcall	.-522    	; 0x134 <LCD_WriteData>
     33e:	8d e0       	ldi	r24, 0x0D	; 13
	LCD_WriteData('D');
     340:	e2 de       	rcall	.-572    	; 0x106 <LCD_Cursor>
     342:	84 e4       	ldi	r24, 0x44	; 68
	LCD_Cursor(cur++);
     344:	f7 de       	rcall	.-530    	; 0x134 <LCD_WriteData>
     346:	8e e0       	ldi	r24, 0x0E	; 14
	LCD_WriteData('I');
     348:	de de       	rcall	.-580    	; 0x106 <LCD_Cursor>
     34a:	89 e4       	ldi	r24, 0x49	; 73
	LCD_Cursor(cur++);
     34c:	f3 de       	rcall	.-538    	; 0x134 <LCD_WriteData>
     34e:	8f e0       	ldi	r24, 0x0F	; 15
	LCD_WriteData('U');
     350:	da de       	rcall	.-588    	; 0x106 <LCD_Cursor>
     352:	85 e5       	ldi	r24, 0x55	; 85
	LCD_Cursor(cur++);
     354:	ef de       	rcall	.-546    	; 0x134 <LCD_WriteData>
     356:	80 e1       	ldi	r24, 0x10	; 16
	LCD_WriteData('M');
     358:	d6 de       	rcall	.-596    	; 0x106 <LCD_Cursor>
     35a:	8d e4       	ldi	r24, 0x4D	; 77
	LCD_Cursor(cur++);		// Newline here
     35c:	eb de       	rcall	.-554    	; 0x134 <LCD_WriteData>
     35e:	81 e1       	ldi	r24, 0x11	; 17
	LCD_WriteData('H');
     360:	d2 de       	rcall	.-604    	; 0x106 <LCD_Cursor>
     362:	88 e4       	ldi	r24, 0x48	; 72
	LCD_Cursor(cur++);
     364:	e7 de       	rcall	.-562    	; 0x134 <LCD_WriteData>
     366:	82 e1       	ldi	r24, 0x12	; 18
	LCD_WriteData('A');
     368:	ce de       	rcall	.-612    	; 0x106 <LCD_Cursor>
     36a:	81 e4       	ldi	r24, 0x41	; 65
	LCD_Cursor(cur++);
     36c:	e3 de       	rcall	.-570    	; 0x134 <LCD_WriteData>
     36e:	83 e1       	ldi	r24, 0x13	; 19
	LCD_WriteData('R');
     370:	ca de       	rcall	.-620    	; 0x106 <LCD_Cursor>
     372:	82 e5       	ldi	r24, 0x52	; 82
	LCD_Cursor(cur++);
     374:	df de       	rcall	.-578    	; 0x134 <LCD_WriteData>
     376:	84 e1       	ldi	r24, 0x14	; 20
	LCD_WriteData('D');
     378:	c6 de       	rcall	.-628    	; 0x106 <LCD_Cursor>
     37a:	84 e4       	ldi	r24, 0x44	; 68
	LCD_Cursor(cur++);
     37c:	db de       	rcall	.-586    	; 0x134 <LCD_WriteData>
     37e:	85 e1       	ldi	r24, 0x15	; 21
	LCD_WriteData(' ');
     380:	c2 de       	rcall	.-636    	; 0x106 <LCD_Cursor>
     382:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     384:	d7 de       	rcall	.-594    	; 0x134 <LCD_WriteData>
     386:	86 e1       	ldi	r24, 0x16	; 22
     388:	be de       	rcall	.-644    	; 0x106 <LCD_Cursor>
	LCD_WriteData(' ');
     38a:	80 e2       	ldi	r24, 0x20	; 32
     38c:	d3 de       	rcall	.-602    	; 0x134 <LCD_WriteData>
     38e:	87 e1       	ldi	r24, 0x17	; 23
	LCD_Cursor(cur++);
     390:	ba de       	rcall	.-652    	; 0x106 <LCD_Cursor>
     392:	80 e2       	ldi	r24, 0x20	; 32
     394:	cf de       	rcall	.-610    	; 0x134 <LCD_WriteData>
	LCD_WriteData(' ');
     396:	88 e1       	ldi	r24, 0x18	; 24
     398:	b6 de       	rcall	.-660    	; 0x106 <LCD_Cursor>
     39a:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     39c:	cb de       	rcall	.-618    	; 0x134 <LCD_WriteData>
     39e:	89 e1       	ldi	r24, 0x19	; 25
     3a0:	b2 de       	rcall	.-668    	; 0x106 <LCD_Cursor>
	LCD_WriteData(' ');
     3a2:	80 e2       	ldi	r24, 0x20	; 32
     3a4:	c7 de       	rcall	.-626    	; 0x134 <LCD_WriteData>
     3a6:	8a e1       	ldi	r24, 0x1A	; 26
	LCD_Cursor(cur++);
     3a8:	ae de       	rcall	.-676    	; 0x106 <LCD_Cursor>
     3aa:	80 e2       	ldi	r24, 0x20	; 32
     3ac:	c3 de       	rcall	.-634    	; 0x134 <LCD_WriteData>
	LCD_WriteData(' ');
     3ae:	8b e1       	ldi	r24, 0x1B	; 27
     3b0:	aa de       	rcall	.-684    	; 0x106 <LCD_Cursor>
     3b2:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     3b4:	bf de       	rcall	.-642    	; 0x134 <LCD_WriteData>
     3b6:	8c e1       	ldi	r24, 0x1C	; 28
     3b8:	a6 de       	rcall	.-692    	; 0x106 <LCD_Cursor>
	LCD_WriteData(' ');
     3ba:	80 e2       	ldi	r24, 0x20	; 32
     3bc:	bb de       	rcall	.-650    	; 0x134 <LCD_WriteData>
     3be:	8d e1       	ldi	r24, 0x1D	; 29
	LCD_Cursor(cur++);
     3c0:	a2 de       	rcall	.-700    	; 0x106 <LCD_Cursor>
     3c2:	80 e2       	ldi	r24, 0x20	; 32
     3c4:	b7 de       	rcall	.-658    	; 0x134 <LCD_WriteData>
	LCD_WriteData(' ');
     3c6:	8e e1       	ldi	r24, 0x1E	; 30
     3c8:	9e de       	rcall	.-708    	; 0x106 <LCD_Cursor>
     3ca:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     3cc:	b3 de       	rcall	.-666    	; 0x134 <LCD_WriteData>
     3ce:	8f e1       	ldi	r24, 0x1F	; 31
     3d0:	9a de       	rcall	.-716    	; 0x106 <LCD_Cursor>
	LCD_WriteData(' ');
     3d2:	80 e2       	ldi	r24, 0x20	; 32
     3d4:	af de       	rcall	.-674    	; 0x134 <LCD_WriteData>
     3d6:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     3d8:	96 de       	rcall	.-724    	; 0x106 <LCD_Cursor>
     3da:	80 e2       	ldi	r24, 0x20	; 32
     3dc:	ab de       	rcall	.-682    	; 0x134 <LCD_WriteData>
	LCD_WriteData(' ');
     3de:	a0 96       	adiw	r28, 0x20	; 32
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	f8 94       	cli
	LCD_Cursor(cur++);
     3e4:	de bf       	out	0x3e, r29	; 62
     3e6:	0f be       	out	0x3f, r0	; 63
     3e8:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteData(' ');
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	08 95       	ret

000003f0 <dispDifMedium>:
	LCD_Cursor(cur++);
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	cd b7       	in	r28, 0x3d	; 61
	LCD_WriteData(' ');
     3f6:	de b7       	in	r29, 0x3e	; 62
     3f8:	a8 97       	sbiw	r28, 0x28	; 40
     3fa:	0f b6       	in	r0, 0x3f	; 63
	LCD_Cursor(cur++);
     3fc:	f8 94       	cli
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	0f be       	out	0x3f, r0	; 63
	LCD_WriteData(' ');
     402:	cd bf       	out	0x3d, r28	; 61
     404:	88 e0       	ldi	r24, 0x08	; 8
     406:	e6 e0       	ldi	r30, 0x06	; 6
}
     408:	f1 e0       	ldi	r31, 0x01	; 1
     40a:	de 01       	movw	r26, r28
     40c:	11 96       	adiw	r26, 0x01	; 1
     40e:	01 90       	ld	r0, Z+
     410:	0d 92       	st	X+, r0
     412:	8a 95       	dec	r24
     414:	e1 f7       	brne	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     416:	88 e0       	ldi	r24, 0x08	; 8
     418:	e6 e2       	ldi	r30, 0x26	; 38
void dispDifMedium(){
	// Medium highlighted in the top right
	
	unsigned char selE[8] = {0x1f, 0x11, 0x17, 0x13, 0x17, 0x11, 0x1f, 0x00};
	unsigned char selM[8] = {0x1f, 0x15, 0x11, 0x11, 0x15, 0x15, 0x1f, 0x00};
     41a:	f1 e0       	ldi	r31, 0x01	; 1
     41c:	de 01       	movw	r26, r28
     41e:	19 96       	adiw	r26, 0x09	; 9
     420:	01 90       	ld	r0, Z+
     422:	0d 92       	st	X+, r0
     424:	8a 95       	dec	r24
     426:	e1 f7       	brne	.-8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	unsigned char selD[8] = {0x1f, 0x13, 0x15, 0x15, 0x15, 0x13, 0x1f, 0x00};
     428:	88 e0       	ldi	r24, 0x08	; 8
     42a:	ee e2       	ldi	r30, 0x2E	; 46
     42c:	f1 e0       	ldi	r31, 0x01	; 1
     42e:	de 01       	movw	r26, r28
     430:	51 96       	adiw	r26, 0x11	; 17
     432:	01 90       	ld	r0, Z+
     434:	0d 92       	st	X+, r0
     436:	8a 95       	dec	r24
     438:	e1 f7       	brne	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
	unsigned char selI[8] = {0x1f, 0x11, 0x1b, 0x1b, 0x1b, 0x11, 0x1f, 0x00};	
     43a:	88 e0       	ldi	r24, 0x08	; 8
     43c:	e6 e3       	ldi	r30, 0x36	; 54
     43e:	f1 e0       	ldi	r31, 0x01	; 1
     440:	de 01       	movw	r26, r28
     442:	59 96       	adiw	r26, 0x19	; 25
     444:	01 90       	ld	r0, Z+
     446:	0d 92       	st	X+, r0
     448:	8a 95       	dec	r24
     44a:	e1 f7       	brne	.-8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	unsigned char selU[8] = {0x1f, 0x15, 0x15, 0x15, 0x15, 0x11, 0x1f, 0x00};	
     44c:	88 e0       	ldi	r24, 0x08	; 8
     44e:	ee e3       	ldi	r30, 0x3E	; 62
     450:	f1 e0       	ldi	r31, 0x01	; 1
     452:	de 01       	movw	r26, r28
     454:	91 96       	adiw	r26, 0x21	; 33
     456:	01 90       	ld	r0, Z+
     458:	0d 92       	st	X+, r0
     45a:	8a 95       	dec	r24
     45c:	e1 f7       	brne	.-8      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	
	LCD_Custom_Char(0, selM);		// build at position 0...
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	e0 de       	rcall	.-576    	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(1, selE);
     468:	be 01       	movw	r22, r28
     46a:	6f 5f       	subi	r22, 0xFF	; 255
     46c:	7f 4f       	sbci	r23, 0xFF	; 255
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	db de       	rcall	.-586    	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(2, selD);
     472:	be 01       	movw	r22, r28
     474:	6f 5e       	subi	r22, 0xEF	; 239
     476:	7f 4f       	sbci	r23, 0xFF	; 255
     478:	82 e0       	ldi	r24, 0x02	; 2
     47a:	d6 de       	rcall	.-596    	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(3, selI);
     47c:	be 01       	movw	r22, r28
     47e:	67 5e       	subi	r22, 0xE7	; 231
     480:	7f 4f       	sbci	r23, 0xFF	; 255
     482:	83 e0       	ldi	r24, 0x03	; 3
     484:	d1 de       	rcall	.-606    	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(4, selU);
     486:	be 01       	movw	r22, r28
     488:	6f 5d       	subi	r22, 0xDF	; 223
     48a:	7f 4f       	sbci	r23, 0xFF	; 255
     48c:	84 e0       	ldi	r24, 0x04	; 4
	
	unsigned char cur = 1;		// initialize cursor to 1
	
	LCD_Cursor(cur++);
     48e:	cc de       	rcall	.-616    	; 0x228 <LCD_Custom_Char>
     490:	81 e0       	ldi	r24, 0x01	; 1
	LCD_WriteData('E');
     492:	39 de       	rcall	.-910    	; 0x106 <LCD_Cursor>
     494:	85 e4       	ldi	r24, 0x45	; 69
	LCD_Cursor(cur++);
     496:	4e de       	rcall	.-868    	; 0x134 <LCD_WriteData>
     498:	82 e0       	ldi	r24, 0x02	; 2
	LCD_WriteData('A');
     49a:	35 de       	rcall	.-918    	; 0x106 <LCD_Cursor>
     49c:	81 e4       	ldi	r24, 0x41	; 65
	LCD_Cursor(cur++);
     49e:	4a de       	rcall	.-876    	; 0x134 <LCD_WriteData>
     4a0:	83 e0       	ldi	r24, 0x03	; 3
	LCD_WriteData('S');
     4a2:	31 de       	rcall	.-926    	; 0x106 <LCD_Cursor>
     4a4:	83 e5       	ldi	r24, 0x53	; 83
	LCD_Cursor(cur++);
     4a6:	46 de       	rcall	.-884    	; 0x134 <LCD_WriteData>
     4a8:	84 e0       	ldi	r24, 0x04	; 4
	LCD_WriteData('Y');
     4aa:	2d de       	rcall	.-934    	; 0x106 <LCD_Cursor>
     4ac:	89 e5       	ldi	r24, 0x59	; 89
	LCD_Cursor(cur++);
     4ae:	42 de       	rcall	.-892    	; 0x134 <LCD_WriteData>
     4b0:	85 e0       	ldi	r24, 0x05	; 5
	LCD_WriteData(' ');
     4b2:	29 de       	rcall	.-942    	; 0x106 <LCD_Cursor>
     4b4:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     4b6:	3e de       	rcall	.-900    	; 0x134 <LCD_WriteData>
     4b8:	86 e0       	ldi	r24, 0x06	; 6
	LCD_WriteData(' ');
     4ba:	25 de       	rcall	.-950    	; 0x106 <LCD_Cursor>
     4bc:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     4be:	3a de       	rcall	.-908    	; 0x134 <LCD_WriteData>
     4c0:	87 e0       	ldi	r24, 0x07	; 7
	LCD_WriteData(' ');
     4c2:	21 de       	rcall	.-958    	; 0x106 <LCD_Cursor>
     4c4:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     4c6:	36 de       	rcall	.-916    	; 0x134 <LCD_WriteData>
     4c8:	88 e0       	ldi	r24, 0x08	; 8
	LCD_WriteData(' ');
     4ca:	1d de       	rcall	.-966    	; 0x106 <LCD_Cursor>
     4cc:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     4ce:	32 de       	rcall	.-924    	; 0x134 <LCD_WriteData>
     4d0:	89 e0       	ldi	r24, 0x09	; 9
	LCD_WriteData(' ');
     4d2:	19 de       	rcall	.-974    	; 0x106 <LCD_Cursor>
     4d4:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     4d6:	2e de       	rcall	.-932    	; 0x134 <LCD_WriteData>
     4d8:	8a e0       	ldi	r24, 0x0A	; 10
	LCD_WriteData(' ');
     4da:	15 de       	rcall	.-982    	; 0x106 <LCD_Cursor>
     4dc:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     4de:	2a de       	rcall	.-940    	; 0x134 <LCD_WriteData>
     4e0:	8b e0       	ldi	r24, 0x0B	; 11
	LCD_WriteData(0);
     4e2:	11 de       	rcall	.-990    	; 0x106 <LCD_Cursor>
     4e4:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Cursor(cur++);
     4e6:	26 de       	rcall	.-948    	; 0x134 <LCD_WriteData>
     4e8:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_WriteData(1);
     4ea:	0d de       	rcall	.-998    	; 0x106 <LCD_Cursor>
     4ec:	81 e0       	ldi	r24, 0x01	; 1
	LCD_Cursor(cur++);
     4ee:	22 de       	rcall	.-956    	; 0x134 <LCD_WriteData>
     4f0:	8d e0       	ldi	r24, 0x0D	; 13
	LCD_WriteData(2);
     4f2:	09 de       	rcall	.-1006   	; 0x106 <LCD_Cursor>
     4f4:	82 e0       	ldi	r24, 0x02	; 2
	LCD_Cursor(cur++);
     4f6:	1e de       	rcall	.-964    	; 0x134 <LCD_WriteData>
     4f8:	8e e0       	ldi	r24, 0x0E	; 14
	LCD_WriteData(3);
     4fa:	05 de       	rcall	.-1014   	; 0x106 <LCD_Cursor>
     4fc:	83 e0       	ldi	r24, 0x03	; 3
	LCD_Cursor(cur++);
     4fe:	1a de       	rcall	.-972    	; 0x134 <LCD_WriteData>
     500:	8f e0       	ldi	r24, 0x0F	; 15
	LCD_WriteData(4);
     502:	01 de       	rcall	.-1022   	; 0x106 <LCD_Cursor>
     504:	84 e0       	ldi	r24, 0x04	; 4
	LCD_Cursor(cur++);
     506:	16 de       	rcall	.-980    	; 0x134 <LCD_WriteData>
     508:	80 e1       	ldi	r24, 0x10	; 16
	LCD_WriteData(0);
     50a:	fd dd       	rcall	.-1030   	; 0x106 <LCD_Cursor>
     50c:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Cursor(cur++);		// Newline here
     50e:	12 de       	rcall	.-988    	; 0x134 <LCD_WriteData>
     510:	81 e1       	ldi	r24, 0x11	; 17
	LCD_WriteData('H');
     512:	f9 dd       	rcall	.-1038   	; 0x106 <LCD_Cursor>
     514:	88 e4       	ldi	r24, 0x48	; 72
	LCD_Cursor(cur++);
     516:	0e de       	rcall	.-996    	; 0x134 <LCD_WriteData>
     518:	82 e1       	ldi	r24, 0x12	; 18
	LCD_WriteData('A');
     51a:	f5 dd       	rcall	.-1046   	; 0x106 <LCD_Cursor>
     51c:	81 e4       	ldi	r24, 0x41	; 65
	LCD_Cursor(cur++);
     51e:	0a de       	rcall	.-1004   	; 0x134 <LCD_WriteData>
     520:	83 e1       	ldi	r24, 0x13	; 19
	LCD_WriteData('R');
     522:	f1 dd       	rcall	.-1054   	; 0x106 <LCD_Cursor>
     524:	82 e5       	ldi	r24, 0x52	; 82
	LCD_Cursor(cur++);
     526:	06 de       	rcall	.-1012   	; 0x134 <LCD_WriteData>
     528:	84 e1       	ldi	r24, 0x14	; 20
	LCD_WriteData('D');
     52a:	ed dd       	rcall	.-1062   	; 0x106 <LCD_Cursor>
     52c:	84 e4       	ldi	r24, 0x44	; 68
	LCD_Cursor(cur++);
     52e:	02 de       	rcall	.-1020   	; 0x134 <LCD_WriteData>
     530:	85 e1       	ldi	r24, 0x15	; 21
	LCD_WriteData(' ');
     532:	e9 dd       	rcall	.-1070   	; 0x106 <LCD_Cursor>
     534:	80 e2       	ldi	r24, 0x20	; 32
     536:	fe dd       	rcall	.-1028   	; 0x134 <LCD_WriteData>
	LCD_Cursor(cur++);
     538:	86 e1       	ldi	r24, 0x16	; 22
     53a:	e5 dd       	rcall	.-1078   	; 0x106 <LCD_Cursor>
     53c:	80 e2       	ldi	r24, 0x20	; 32
	LCD_WriteData(' ');
     53e:	fa dd       	rcall	.-1036   	; 0x134 <LCD_WriteData>
     540:	87 e1       	ldi	r24, 0x17	; 23
     542:	e1 dd       	rcall	.-1086   	; 0x106 <LCD_Cursor>
	LCD_Cursor(cur++);
     544:	80 e2       	ldi	r24, 0x20	; 32
     546:	f6 dd       	rcall	.-1044   	; 0x134 <LCD_WriteData>
     548:	88 e1       	ldi	r24, 0x18	; 24
	LCD_WriteData(' ');
     54a:	dd dd       	rcall	.-1094   	; 0x106 <LCD_Cursor>
     54c:	80 e2       	ldi	r24, 0x20	; 32
     54e:	f2 dd       	rcall	.-1052   	; 0x134 <LCD_WriteData>
	LCD_Cursor(cur++);
     550:	89 e1       	ldi	r24, 0x19	; 25
     552:	d9 dd       	rcall	.-1102   	; 0x106 <LCD_Cursor>
     554:	80 e2       	ldi	r24, 0x20	; 32
	LCD_WriteData(' ');
     556:	ee dd       	rcall	.-1060   	; 0x134 <LCD_WriteData>
     558:	8a e1       	ldi	r24, 0x1A	; 26
     55a:	d5 dd       	rcall	.-1110   	; 0x106 <LCD_Cursor>
	LCD_Cursor(cur++);
     55c:	80 e2       	ldi	r24, 0x20	; 32
     55e:	ea dd       	rcall	.-1068   	; 0x134 <LCD_WriteData>
     560:	8b e1       	ldi	r24, 0x1B	; 27
	LCD_WriteData(' ');
     562:	d1 dd       	rcall	.-1118   	; 0x106 <LCD_Cursor>
     564:	80 e2       	ldi	r24, 0x20	; 32
     566:	e6 dd       	rcall	.-1076   	; 0x134 <LCD_WriteData>
	LCD_Cursor(cur++);
     568:	8c e1       	ldi	r24, 0x1C	; 28
     56a:	cd dd       	rcall	.-1126   	; 0x106 <LCD_Cursor>
     56c:	80 e2       	ldi	r24, 0x20	; 32
	LCD_WriteData(' ');
     56e:	e2 dd       	rcall	.-1084   	; 0x134 <LCD_WriteData>
     570:	8d e1       	ldi	r24, 0x1D	; 29
     572:	c9 dd       	rcall	.-1134   	; 0x106 <LCD_Cursor>
	LCD_Cursor(cur++);
     574:	80 e2       	ldi	r24, 0x20	; 32
     576:	de dd       	rcall	.-1092   	; 0x134 <LCD_WriteData>
     578:	8e e1       	ldi	r24, 0x1E	; 30
	LCD_WriteData(' ');
     57a:	c5 dd       	rcall	.-1142   	; 0x106 <LCD_Cursor>
     57c:	80 e2       	ldi	r24, 0x20	; 32
     57e:	da dd       	rcall	.-1100   	; 0x134 <LCD_WriteData>
	LCD_Cursor(cur++);
     580:	8f e1       	ldi	r24, 0x1F	; 31
     582:	c1 dd       	rcall	.-1150   	; 0x106 <LCD_Cursor>
     584:	80 e2       	ldi	r24, 0x20	; 32
	LCD_WriteData(' ');
     586:	d6 dd       	rcall	.-1108   	; 0x134 <LCD_WriteData>
     588:	80 e2       	ldi	r24, 0x20	; 32
     58a:	bd dd       	rcall	.-1158   	; 0x106 <LCD_Cursor>
	LCD_Cursor(cur++);
     58c:	80 e2       	ldi	r24, 0x20	; 32
     58e:	d2 dd       	rcall	.-1116   	; 0x134 <LCD_WriteData>
     590:	a8 96       	adiw	r28, 0x28	; 40
	LCD_WriteData(' ');
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	f8 94       	cli
     596:	de bf       	out	0x3e, r29	; 62
	LCD_Cursor(cur++);
     598:	0f be       	out	0x3f, r0	; 63
     59a:	cd bf       	out	0x3d, r28	; 61
     59c:	df 91       	pop	r29
	LCD_WriteData(' ');
     59e:	cf 91       	pop	r28
     5a0:	08 95       	ret

000005a2 <dispDifHard>:
     5a2:	cf 93       	push	r28
	LCD_Cursor(cur++);
     5a4:	df 93       	push	r29
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
	LCD_WriteData(' ');
     5aa:	a0 97       	sbiw	r28, 0x20	; 32
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
	LCD_Cursor(cur++);
     5b0:	de bf       	out	0x3e, r29	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteData(' ');
     5b6:	88 e0       	ldi	r24, 0x08	; 8
     5b8:	e6 e4       	ldi	r30, 0x46	; 70
     5ba:	f1 e0       	ldi	r31, 0x01	; 1
}
     5bc:	de 01       	movw	r26, r28
     5be:	11 96       	adiw	r26, 0x01	; 1
     5c0:	01 90       	ld	r0, Z+
     5c2:	0d 92       	st	X+, r0
     5c4:	8a 95       	dec	r24
     5c6:	e1 f7       	brne	.-8      	; 0x5c0 <dispDifHard+0x1e>
     5c8:	88 e0       	ldi	r24, 0x08	; 8
     5ca:	ee e0       	ldi	r30, 0x0E	; 14
     5cc:	f1 e0       	ldi	r31, 0x01	; 1
void dispDifHard(){
	// Medium highlighted in the top right
	
	unsigned char selH[8] = {0x1f, 0x15, 0x15, 0x11, 0x15, 0x15, 0x1f, 0x00};
	unsigned char selA[8] = {0x1f, 0x1b, 0x15, 0x11, 0x15, 0x15, 0x1f, 0x00};	
     5ce:	de 01       	movw	r26, r28
     5d0:	19 96       	adiw	r26, 0x09	; 9
     5d2:	01 90       	ld	r0, Z+
     5d4:	0d 92       	st	X+, r0
     5d6:	8a 95       	dec	r24
     5d8:	e1 f7       	brne	.-8      	; 0x5d2 <dispDifHard+0x30>
	unsigned char selD[8] = {0x1f, 0x13, 0x15, 0x15, 0x15, 0x13, 0x1f, 0x00};
     5da:	88 e0       	ldi	r24, 0x08	; 8
     5dc:	ee e2       	ldi	r30, 0x2E	; 46
     5de:	f1 e0       	ldi	r31, 0x01	; 1
     5e0:	de 01       	movw	r26, r28
     5e2:	51 96       	adiw	r26, 0x11	; 17
     5e4:	01 90       	ld	r0, Z+
     5e6:	0d 92       	st	X+, r0
     5e8:	8a 95       	dec	r24
     5ea:	e1 f7       	brne	.-8      	; 0x5e4 <dispDifHard+0x42>
	unsigned char selR[8] = {0x1f, 0x13, 0x15, 0x13, 0x15, 0x15, 0x1f, 0x00};	
     5ec:	88 e0       	ldi	r24, 0x08	; 8
     5ee:	ee e4       	ldi	r30, 0x4E	; 78
     5f0:	f1 e0       	ldi	r31, 0x01	; 1
     5f2:	de 01       	movw	r26, r28
     5f4:	59 96       	adiw	r26, 0x19	; 25
     5f6:	01 90       	ld	r0, Z+
     5f8:	0d 92       	st	X+, r0
     5fa:	8a 95       	dec	r24
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <dispDifHard+0x54>
	
	LCD_Custom_Char(0, selH);		// build at position 0...
     5fe:	be 01       	movw	r22, r28
     600:	6f 5f       	subi	r22, 0xFF	; 255
     602:	7f 4f       	sbci	r23, 0xFF	; 255
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	10 de       	rcall	.-992    	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(1, selA);
     608:	be 01       	movw	r22, r28
     60a:	67 5f       	subi	r22, 0xF7	; 247
     60c:	7f 4f       	sbci	r23, 0xFF	; 255
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	0b de       	rcall	.-1002   	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(2, selR);
     612:	be 01       	movw	r22, r28
     614:	67 5e       	subi	r22, 0xE7	; 231
     616:	7f 4f       	sbci	r23, 0xFF	; 255
     618:	82 e0       	ldi	r24, 0x02	; 2
     61a:	06 de       	rcall	.-1012   	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(3, selD);
     61c:	be 01       	movw	r22, r28
     61e:	6f 5e       	subi	r22, 0xEF	; 239
     620:	7f 4f       	sbci	r23, 0xFF	; 255
     622:	83 e0       	ldi	r24, 0x03	; 3
	
	unsigned char cur = 1;		// initialize cursor to 1
	
	LCD_Cursor(cur++);
     624:	01 de       	rcall	.-1022   	; 0x228 <LCD_Custom_Char>
     626:	81 e0       	ldi	r24, 0x01	; 1
	LCD_WriteData('E');
     628:	6e dd       	rcall	.-1316   	; 0x106 <LCD_Cursor>
     62a:	85 e4       	ldi	r24, 0x45	; 69
	LCD_Cursor(cur++);
     62c:	83 dd       	rcall	.-1274   	; 0x134 <LCD_WriteData>
     62e:	82 e0       	ldi	r24, 0x02	; 2
	LCD_WriteData('A');
     630:	6a dd       	rcall	.-1324   	; 0x106 <LCD_Cursor>
     632:	81 e4       	ldi	r24, 0x41	; 65
	LCD_Cursor(cur++);
     634:	7f dd       	rcall	.-1282   	; 0x134 <LCD_WriteData>
     636:	83 e0       	ldi	r24, 0x03	; 3
	LCD_WriteData('S');
     638:	66 dd       	rcall	.-1332   	; 0x106 <LCD_Cursor>
     63a:	83 e5       	ldi	r24, 0x53	; 83
	LCD_Cursor(cur++);
     63c:	7b dd       	rcall	.-1290   	; 0x134 <LCD_WriteData>
     63e:	84 e0       	ldi	r24, 0x04	; 4
	LCD_WriteData('Y');
     640:	62 dd       	rcall	.-1340   	; 0x106 <LCD_Cursor>
     642:	89 e5       	ldi	r24, 0x59	; 89
	LCD_Cursor(cur++);
     644:	77 dd       	rcall	.-1298   	; 0x134 <LCD_WriteData>
     646:	85 e0       	ldi	r24, 0x05	; 5
	LCD_WriteData(' ');
     648:	5e dd       	rcall	.-1348   	; 0x106 <LCD_Cursor>
     64a:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     64c:	73 dd       	rcall	.-1306   	; 0x134 <LCD_WriteData>
     64e:	86 e0       	ldi	r24, 0x06	; 6
	LCD_WriteData(' ');
     650:	5a dd       	rcall	.-1356   	; 0x106 <LCD_Cursor>
     652:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     654:	6f dd       	rcall	.-1314   	; 0x134 <LCD_WriteData>
     656:	87 e0       	ldi	r24, 0x07	; 7
	LCD_WriteData(' ');
     658:	56 dd       	rcall	.-1364   	; 0x106 <LCD_Cursor>
     65a:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     65c:	6b dd       	rcall	.-1322   	; 0x134 <LCD_WriteData>
     65e:	88 e0       	ldi	r24, 0x08	; 8
	LCD_WriteData(' ');
     660:	52 dd       	rcall	.-1372   	; 0x106 <LCD_Cursor>
     662:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     664:	67 dd       	rcall	.-1330   	; 0x134 <LCD_WriteData>
     666:	89 e0       	ldi	r24, 0x09	; 9
	LCD_WriteData(' ');
     668:	4e dd       	rcall	.-1380   	; 0x106 <LCD_Cursor>
     66a:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     66c:	63 dd       	rcall	.-1338   	; 0x134 <LCD_WriteData>
     66e:	8a e0       	ldi	r24, 0x0A	; 10
	LCD_WriteData(' ');
     670:	4a dd       	rcall	.-1388   	; 0x106 <LCD_Cursor>
     672:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     674:	5f dd       	rcall	.-1346   	; 0x134 <LCD_WriteData>
     676:	8b e0       	ldi	r24, 0x0B	; 11
	LCD_WriteData('M');
     678:	46 dd       	rcall	.-1396   	; 0x106 <LCD_Cursor>
     67a:	8d e4       	ldi	r24, 0x4D	; 77
	LCD_Cursor(cur++);
     67c:	5b dd       	rcall	.-1354   	; 0x134 <LCD_WriteData>
     67e:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_WriteData('E');
     680:	42 dd       	rcall	.-1404   	; 0x106 <LCD_Cursor>
     682:	85 e4       	ldi	r24, 0x45	; 69
	LCD_Cursor(cur++);
     684:	57 dd       	rcall	.-1362   	; 0x134 <LCD_WriteData>
     686:	8d e0       	ldi	r24, 0x0D	; 13
	LCD_WriteData('D');
     688:	3e dd       	rcall	.-1412   	; 0x106 <LCD_Cursor>
     68a:	84 e4       	ldi	r24, 0x44	; 68
	LCD_Cursor(cur++);
     68c:	53 dd       	rcall	.-1370   	; 0x134 <LCD_WriteData>
     68e:	8e e0       	ldi	r24, 0x0E	; 14
	LCD_WriteData('I');
     690:	3a dd       	rcall	.-1420   	; 0x106 <LCD_Cursor>
     692:	89 e4       	ldi	r24, 0x49	; 73
	LCD_Cursor(cur++);
     694:	4f dd       	rcall	.-1378   	; 0x134 <LCD_WriteData>
     696:	8f e0       	ldi	r24, 0x0F	; 15
	LCD_WriteData('U');
     698:	36 dd       	rcall	.-1428   	; 0x106 <LCD_Cursor>
     69a:	85 e5       	ldi	r24, 0x55	; 85
	LCD_Cursor(cur++);
     69c:	4b dd       	rcall	.-1386   	; 0x134 <LCD_WriteData>
     69e:	80 e1       	ldi	r24, 0x10	; 16
	LCD_WriteData('M');
     6a0:	32 dd       	rcall	.-1436   	; 0x106 <LCD_Cursor>
     6a2:	8d e4       	ldi	r24, 0x4D	; 77
	LCD_Cursor(cur++);		// Newline here
     6a4:	47 dd       	rcall	.-1394   	; 0x134 <LCD_WriteData>
     6a6:	81 e1       	ldi	r24, 0x11	; 17
	LCD_WriteData(0);
     6a8:	2e dd       	rcall	.-1444   	; 0x106 <LCD_Cursor>
     6aa:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Cursor(cur++);
     6ac:	43 dd       	rcall	.-1402   	; 0x134 <LCD_WriteData>
     6ae:	82 e1       	ldi	r24, 0x12	; 18
	LCD_WriteData(1);
     6b0:	2a dd       	rcall	.-1452   	; 0x106 <LCD_Cursor>
     6b2:	81 e0       	ldi	r24, 0x01	; 1
	LCD_Cursor(cur++);
     6b4:	3f dd       	rcall	.-1410   	; 0x134 <LCD_WriteData>
     6b6:	83 e1       	ldi	r24, 0x13	; 19
	LCD_WriteData(2);
     6b8:	26 dd       	rcall	.-1460   	; 0x106 <LCD_Cursor>
     6ba:	82 e0       	ldi	r24, 0x02	; 2
	LCD_Cursor(cur++);
     6bc:	3b dd       	rcall	.-1418   	; 0x134 <LCD_WriteData>
     6be:	84 e1       	ldi	r24, 0x14	; 20
	LCD_WriteData(3);
     6c0:	22 dd       	rcall	.-1468   	; 0x106 <LCD_Cursor>
     6c2:	83 e0       	ldi	r24, 0x03	; 3
	LCD_Cursor(cur++);
     6c4:	37 dd       	rcall	.-1426   	; 0x134 <LCD_WriteData>
     6c6:	85 e1       	ldi	r24, 0x15	; 21
	LCD_WriteData(' ');
     6c8:	1e dd       	rcall	.-1476   	; 0x106 <LCD_Cursor>
     6ca:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     6cc:	33 dd       	rcall	.-1434   	; 0x134 <LCD_WriteData>
     6ce:	86 e1       	ldi	r24, 0x16	; 22
     6d0:	1a dd       	rcall	.-1484   	; 0x106 <LCD_Cursor>
	LCD_WriteData(' ');
     6d2:	80 e2       	ldi	r24, 0x20	; 32
     6d4:	2f dd       	rcall	.-1442   	; 0x134 <LCD_WriteData>
     6d6:	87 e1       	ldi	r24, 0x17	; 23
	LCD_Cursor(cur++);
     6d8:	16 dd       	rcall	.-1492   	; 0x106 <LCD_Cursor>
     6da:	80 e2       	ldi	r24, 0x20	; 32
     6dc:	2b dd       	rcall	.-1450   	; 0x134 <LCD_WriteData>
	LCD_WriteData(' ');
     6de:	88 e1       	ldi	r24, 0x18	; 24
     6e0:	12 dd       	rcall	.-1500   	; 0x106 <LCD_Cursor>
     6e2:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     6e4:	27 dd       	rcall	.-1458   	; 0x134 <LCD_WriteData>
     6e6:	89 e1       	ldi	r24, 0x19	; 25
     6e8:	0e dd       	rcall	.-1508   	; 0x106 <LCD_Cursor>
	LCD_WriteData(' ');
     6ea:	80 e2       	ldi	r24, 0x20	; 32
     6ec:	23 dd       	rcall	.-1466   	; 0x134 <LCD_WriteData>
     6ee:	8a e1       	ldi	r24, 0x1A	; 26
	LCD_Cursor(cur++);
     6f0:	0a dd       	rcall	.-1516   	; 0x106 <LCD_Cursor>
     6f2:	80 e2       	ldi	r24, 0x20	; 32
     6f4:	1f dd       	rcall	.-1474   	; 0x134 <LCD_WriteData>
	LCD_WriteData(' ');
     6f6:	8b e1       	ldi	r24, 0x1B	; 27
     6f8:	06 dd       	rcall	.-1524   	; 0x106 <LCD_Cursor>
     6fa:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     6fc:	1b dd       	rcall	.-1482   	; 0x134 <LCD_WriteData>
     6fe:	8c e1       	ldi	r24, 0x1C	; 28
     700:	02 dd       	rcall	.-1532   	; 0x106 <LCD_Cursor>
	LCD_WriteData(' ');
     702:	80 e2       	ldi	r24, 0x20	; 32
     704:	17 dd       	rcall	.-1490   	; 0x134 <LCD_WriteData>
     706:	8d e1       	ldi	r24, 0x1D	; 29
	LCD_Cursor(cur++);
     708:	fe dc       	rcall	.-1540   	; 0x106 <LCD_Cursor>
     70a:	80 e2       	ldi	r24, 0x20	; 32
     70c:	13 dd       	rcall	.-1498   	; 0x134 <LCD_WriteData>
	LCD_WriteData(' ');
     70e:	8e e1       	ldi	r24, 0x1E	; 30
     710:	fa dc       	rcall	.-1548   	; 0x106 <LCD_Cursor>
     712:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     714:	0f dd       	rcall	.-1506   	; 0x134 <LCD_WriteData>
     716:	8f e1       	ldi	r24, 0x1F	; 31
     718:	f6 dc       	rcall	.-1556   	; 0x106 <LCD_Cursor>
	LCD_WriteData(' ');
     71a:	80 e2       	ldi	r24, 0x20	; 32
     71c:	0b dd       	rcall	.-1514   	; 0x134 <LCD_WriteData>
     71e:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     720:	f2 dc       	rcall	.-1564   	; 0x106 <LCD_Cursor>
     722:	80 e2       	ldi	r24, 0x20	; 32
     724:	07 dd       	rcall	.-1522   	; 0x134 <LCD_WriteData>
	LCD_WriteData(' ');
     726:	a0 96       	adiw	r28, 0x20	; 32
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
	LCD_Cursor(cur++);
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteData(' ');
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	08 95       	ret

00000738 <setDifficulty>:
	LCD_Cursor(cur++);
     738:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <diff>
     73c:	81 30       	cpi	r24, 0x01	; 1
	LCD_WriteData(' ');
     73e:	d9 f0       	breq	.+54     	; 0x776 <setDifficulty+0x3e>
     740:	30 f0       	brcs	.+12     	; 0x74e <setDifficulty+0x16>
     742:	82 30       	cpi	r24, 0x02	; 2
	LCD_Cursor(cur++);
     744:	a1 f1       	breq	.+104    	; 0x7ae <setDifficulty+0x76>
     746:	83 30       	cpi	r24, 0x03	; 3
     748:	09 f4       	brne	.+2      	; 0x74c <setDifficulty+0x14>
	LCD_WriteData(' ');
     74a:	4d c0       	rjmp	.+154    	; 0x7e6 <setDifficulty+0xae>
     74c:	68 c0       	rjmp	.+208    	; 0x81e <setDifficulty+0xe6>
     74e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <difficultyEasy>
}
     752:	88 23       	and	r24, r24
     754:	21 f0       	breq	.+8      	; 0x75e <setDifficulty+0x26>
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <diff>
     75c:	76 c0       	rjmp	.+236    	; 0x84a <setDifficulty+0x112>
     75e:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <difficultyMedium>

	switch(diff){	// transitions
		case initDif:
			if(difficultyEasy)
			diff = easy;
			else if(difficultyMedium)
     762:	88 23       	and	r24, r24
     764:	21 f0       	breq	.+8      	; 0x76e <setDifficulty+0x36>
			diff = medium;
     766:	82 e0       	ldi	r24, 0x02	; 2
     768:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <diff>
     76c:	70 c0       	rjmp	.+224    	; 0x84e <setDifficulty+0x116>
			else
			diff = hard;
     76e:	83 e0       	ldi	r24, 0x03	; 3
     770:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <diff>
     774:	6e c0       	rjmp	.+220    	; 0x852 <setDifficulty+0x11a>
		break;
		case easy:
			if(!GetBit(PINA, 1)){
     776:	01 99       	sbic	0x00, 1	; 0
     778:	04 c0       	rjmp	.+8      	; 0x782 <setDifficulty+0x4a>
				diff = medium;
     77a:	82 e0       	ldi	r24, 0x02	; 2
     77c:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <diff>
     780:	66 c0       	rjmp	.+204    	; 0x84e <setDifficulty+0x116>
			}
			else if(!GetBit(PINA, 2)){
     782:	02 99       	sbic	0x00, 2	; 0
     784:	04 c0       	rjmp	.+8      	; 0x78e <setDifficulty+0x56>
				diff = hard;
     786:	83 e0       	ldi	r24, 0x03	; 3
     788:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <diff>
     78c:	62 c0       	rjmp	.+196    	; 0x852 <setDifficulty+0x11a>
			}
			else if(!GetBit(PINA, 4)){		// select
     78e:	04 99       	sbic	0x00, 4	; 0
     790:	5c c0       	rjmp	.+184    	; 0x84a <setDifficulty+0x112>
				while(!GetBit(PINA, 4));	// wait for release
     792:	04 9b       	sbis	0x00, 4	; 0
     794:	fe cf       	rjmp	.-4      	; 0x792 <setDifficulty+0x5a>
				difficultyEasy = 1;		// set difficulty to easy
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <difficultyEasy>
				difficultyMedium = 0;
     79c:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <difficultyMedium>
				difficultyHard = 0;
     7a0:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <difficultyHard>
				
				inDifficulty = 0;
     7a4:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <__data_end>
				inMenu = 1;
     7a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     7ac:	4e c0       	rjmp	.+156    	; 0x84a <setDifficulty+0x112>
			else{
				diff = easy;
			}
		break;
		case medium:
			if(!GetBit(PINA, 3)){
     7ae:	03 99       	sbic	0x00, 3	; 0
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <setDifficulty+0x82>
				diff = easy;
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <diff>
     7b8:	48 c0       	rjmp	.+144    	; 0x84a <setDifficulty+0x112>
			}
			else if(!GetBit(PINA, 2)){
     7ba:	02 99       	sbic	0x00, 2	; 0
     7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <setDifficulty+0x8e>
				diff = hard;
     7be:	83 e0       	ldi	r24, 0x03	; 3
     7c0:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <diff>
     7c4:	46 c0       	rjmp	.+140    	; 0x852 <setDifficulty+0x11a>
			}
			else if(!GetBit(PINA, 4)){
     7c6:	04 99       	sbic	0x00, 4	; 0
     7c8:	42 c0       	rjmp	.+132    	; 0x84e <setDifficulty+0x116>
				while(!GetBit(PINA, 4));	// wait for release
     7ca:	04 9b       	sbis	0x00, 4	; 0
     7cc:	fe cf       	rjmp	.-4      	; 0x7ca <setDifficulty+0x92>
				difficultyEasy = 0;
     7ce:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <difficultyEasy>
				difficultyMedium = 1;
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <difficultyMedium>
				difficultyHard = 0;
     7d8:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <difficultyHard>
				
				inDifficulty = 0;
     7dc:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <__data_end>
				inMenu = 1;
     7e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     7e4:	34 c0       	rjmp	.+104    	; 0x84e <setDifficulty+0x116>
			else{
				diff = medium;
			}
		break;
		case hard:
			if(!GetBit(PINA, 0)){
     7e6:	00 99       	sbic	0x00, 0	; 0
     7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <setDifficulty+0xba>
				diff = easy;
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <diff>
     7f0:	2c c0       	rjmp	.+88     	; 0x84a <setDifficulty+0x112>
			}
			else if(!GetBit(PINA, 1)){
     7f2:	01 99       	sbic	0x00, 1	; 0
     7f4:	04 c0       	rjmp	.+8      	; 0x7fe <setDifficulty+0xc6>
				diff = medium;
     7f6:	82 e0       	ldi	r24, 0x02	; 2
     7f8:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <diff>
     7fc:	28 c0       	rjmp	.+80     	; 0x84e <setDifficulty+0x116>
			}
			else if(!GetBit(PINA, 4)){
     7fe:	04 99       	sbic	0x00, 4	; 0
     800:	28 c0       	rjmp	.+80     	; 0x852 <setDifficulty+0x11a>
				while(!GetBit(PINA, 4));	// wait for release
     802:	04 9b       	sbis	0x00, 4	; 0
     804:	fe cf       	rjmp	.-4      	; 0x802 <setDifficulty+0xca>
				difficultyEasy = 0;
     806:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <difficultyEasy>
				difficultyMedium = 0;
     80a:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <difficultyMedium>
				difficultyHard = 1;
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <difficultyHard>
				
				inDifficulty = 0;
     814:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <__data_end>
				inMenu = 1;
     818:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     81c:	1a c0       	rjmp	.+52     	; 0x852 <setDifficulty+0x11a>
			}
		break;
		default:
		break;
	}
	switch(diff){	// actions
     81e:	81 30       	cpi	r24, 0x01	; 1
     820:	a1 f0       	breq	.+40     	; 0x84a <setDifficulty+0x112>
     822:	28 f0       	brcs	.+10     	; 0x82e <setDifficulty+0xf6>
     824:	82 30       	cpi	r24, 0x02	; 2
     826:	99 f0       	breq	.+38     	; 0x84e <setDifficulty+0x116>
     828:	83 30       	cpi	r24, 0x03	; 3
     82a:	a9 f4       	brne	.+42     	; 0x856 <setDifficulty+0x11e>
     82c:	12 c0       	rjmp	.+36     	; 0x852 <setDifficulty+0x11a>
		case initDif:
			if(difficultyEasy){
     82e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <difficultyEasy>
     832:	88 23       	and	r24, r24
     834:	11 f0       	breq	.+4      	; 0x83a <setDifficulty+0x102>
				dispDifEasy();
     836:	11 cd       	rjmp	.-1502   	; 0x25a <dispDifEasy>
     838:	08 95       	ret
			}
			else if(difficultyMedium){
     83a:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <difficultyMedium>
     83e:	88 23       	and	r24, r24
				dispDifMedium();
     840:	11 f0       	breq	.+4      	; 0x846 <setDifficulty+0x10e>
     842:	d6 cd       	rjmp	.-1108   	; 0x3f0 <dispDifMedium>
			}
			else{
				dispDifHard();
     844:	08 95       	ret
     846:	ad ce       	rjmp	.-678    	; 0x5a2 <dispDifHard>
			}
		break;
		case easy:
			dispDifEasy();
     848:	08 95       	ret
		break;
     84a:	07 cd       	rjmp	.-1522   	; 0x25a <dispDifEasy>
		case medium:
			dispDifMedium();
     84c:	08 95       	ret
     84e:	d0 cd       	rjmp	.-1120   	; 0x3f0 <dispDifMedium>
		break;
     850:	08 95       	ret
		case hard:
			dispDifHard();
     852:	a7 ce       	rjmp	.-690    	; 0x5a2 <dispDifHard>
		break;
     854:	08 95       	ret
		default:
			if(difficultyEasy){
     856:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <difficultyEasy>
     85a:	88 23       	and	r24, r24
     85c:	11 f0       	breq	.+4      	; 0x862 <setDifficulty+0x12a>
				dispDifEasy();
     85e:	fd cc       	rjmp	.-1542   	; 0x25a <dispDifEasy>
     860:	08 95       	ret
			}
			else if(difficultyMedium){
     862:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <difficultyMedium>
     866:	88 23       	and	r24, r24
     868:	11 f0       	breq	.+4      	; 0x86e <setDifficulty+0x136>
				dispDifMedium();
     86a:	c2 cd       	rjmp	.-1148   	; 0x3f0 <dispDifMedium>
     86c:	08 95       	ret
     86e:	99 ce       	rjmp	.-718    	; 0x5a2 <dispDifHard>
			}
			else{
				dispDifHard();
     870:	08 95       	ret

00000872 <dispTopRight>:
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
	LCD_WriteCommand (0x40 + (loc*8));	/* Command 0x40 for CGRAM */
	for(i = 0;i < 8; i++)	/* 7 cause the bottom is reserved for the cursor */
		LCD_WriteData(msg[i]);
	LCD_WriteCommand(0x80);
}
void dispTopRight(){
     876:	cd b7       	in	r28, 0x3d	; 61
     878:	de b7       	in	r29, 0x3e	; 62
     87a:	c0 54       	subi	r28, 0x40	; 64
     87c:	d1 09       	sbc	r29, r1
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	de bf       	out	0x3e, r29	; 62
     884:	0f be       	out	0x3f, r0	; 63
     886:	cd bf       	out	0x3d, r28	; 61
	// DIFFICULTY highlighted in the top right
	
	unsigned char selD[8] = {0x1f, 0x13, 0x15, 0x15, 0x15, 0x13, 0x1f, 0x00};
     888:	88 e0       	ldi	r24, 0x08	; 8
     88a:	ee e2       	ldi	r30, 0x2E	; 46
     88c:	f1 e0       	ldi	r31, 0x01	; 1
     88e:	de 01       	movw	r26, r28
     890:	11 96       	adiw	r26, 0x01	; 1
     892:	01 90       	ld	r0, Z+
     894:	0d 92       	st	X+, r0
     896:	8a 95       	dec	r24
     898:	e1 f7       	brne	.-8      	; 0x892 <dispTopRight+0x20>
	unsigned char selI[8] = {0x1f, 0x11, 0x1b, 0x1b, 0x1b, 0x11, 0x1f, 0x00};
     89a:	88 e0       	ldi	r24, 0x08	; 8
     89c:	e6 e3       	ldi	r30, 0x36	; 54
     89e:	f1 e0       	ldi	r31, 0x01	; 1
     8a0:	de 01       	movw	r26, r28
     8a2:	19 96       	adiw	r26, 0x09	; 9
     8a4:	01 90       	ld	r0, Z+
     8a6:	0d 92       	st	X+, r0
     8a8:	8a 95       	dec	r24
     8aa:	e1 f7       	brne	.-8      	; 0x8a4 <dispTopRight+0x32>
	unsigned char selF[8] = {0x1f, 0x11, 0x17, 0x11, 0x17, 0x17, 0x1f, 0x00};
     8ac:	88 e0       	ldi	r24, 0x08	; 8
     8ae:	e6 e5       	ldi	r30, 0x56	; 86
     8b0:	f1 e0       	ldi	r31, 0x01	; 1
     8b2:	de 01       	movw	r26, r28
     8b4:	51 96       	adiw	r26, 0x11	; 17
     8b6:	01 90       	ld	r0, Z+
     8b8:	0d 92       	st	X+, r0
     8ba:	8a 95       	dec	r24
     8bc:	e1 f7       	brne	.-8      	; 0x8b6 <dispTopRight+0x44>
	unsigned char selC[8] = {0x1f, 0x11, 0x17, 0x17, 0x17, 0x11, 0x1f, 0x00};
     8be:	88 e0       	ldi	r24, 0x08	; 8
     8c0:	ee e5       	ldi	r30, 0x5E	; 94
     8c2:	f1 e0       	ldi	r31, 0x01	; 1
     8c4:	de 01       	movw	r26, r28
     8c6:	59 96       	adiw	r26, 0x19	; 25
     8c8:	01 90       	ld	r0, Z+
     8ca:	0d 92       	st	X+, r0
     8cc:	8a 95       	dec	r24
     8ce:	e1 f7       	brne	.-8      	; 0x8c8 <dispTopRight+0x56>
	unsigned char selU[8] = {0x1f, 0x15, 0x15, 0x15, 0x15, 0x11, 0x1f, 0x00};
     8d0:	88 e0       	ldi	r24, 0x08	; 8
     8d2:	ee e3       	ldi	r30, 0x3E	; 62
     8d4:	f1 e0       	ldi	r31, 0x01	; 1
     8d6:	de 01       	movw	r26, r28
     8d8:	91 96       	adiw	r26, 0x21	; 33
     8da:	01 90       	ld	r0, Z+
     8dc:	0d 92       	st	X+, r0
     8de:	8a 95       	dec	r24
     8e0:	e1 f7       	brne	.-8      	; 0x8da <dispTopRight+0x68>
	unsigned char selL[8] = {0x1f, 0x17, 0x17, 0x17, 0x17, 0x11, 0x1f, 0x00};
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	e6 e6       	ldi	r30, 0x66	; 102
     8e6:	f1 e0       	ldi	r31, 0x01	; 1
     8e8:	de 01       	movw	r26, r28
     8ea:	99 96       	adiw	r26, 0x29	; 41
     8ec:	01 90       	ld	r0, Z+
     8ee:	0d 92       	st	X+, r0
     8f0:	8a 95       	dec	r24
     8f2:	e1 f7       	brne	.-8      	; 0x8ec <dispTopRight+0x7a>
	unsigned char selT[8] = {0x1f, 0x11, 0x1b, 0x1b, 0x1b, 0x1b, 0x1f, 0x00};
     8f4:	88 e0       	ldi	r24, 0x08	; 8
     8f6:	ee e6       	ldi	r30, 0x6E	; 110
     8f8:	f1 e0       	ldi	r31, 0x01	; 1
     8fa:	de 01       	movw	r26, r28
     8fc:	d1 96       	adiw	r26, 0x31	; 49
     8fe:	01 90       	ld	r0, Z+
     900:	0d 92       	st	X+, r0
     902:	8a 95       	dec	r24
     904:	e1 f7       	brne	.-8      	; 0x8fe <dispTopRight+0x8c>
	unsigned char selY[8] = {0x1f, 0x15, 0x15, 0x1b, 0x1b, 0x1b, 0x1f, 0x00};
     906:	88 e0       	ldi	r24, 0x08	; 8
     908:	ee e1       	ldi	r30, 0x1E	; 30
     90a:	f1 e0       	ldi	r31, 0x01	; 1
     90c:	de 01       	movw	r26, r28
     90e:	d9 96       	adiw	r26, 0x39	; 57
     910:	01 90       	ld	r0, Z+
     912:	0d 92       	st	X+, r0
     914:	8a 95       	dec	r24
     916:	e1 f7       	brne	.-8      	; 0x910 <dispTopRight+0x9e>
	
	LCD_Custom_Char(0, selD);		// build P at position 0...
     918:	be 01       	movw	r22, r28
     91a:	6f 5f       	subi	r22, 0xFF	; 255
     91c:	7f 4f       	sbci	r23, 0xFF	; 255
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	83 dc       	rcall	.-1786   	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(1, selI);
     922:	be 01       	movw	r22, r28
     924:	67 5f       	subi	r22, 0xF7	; 247
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	7e dc       	rcall	.-1796   	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(2, selF);
     92c:	be 01       	movw	r22, r28
     92e:	6f 5e       	subi	r22, 0xEF	; 239
     930:	7f 4f       	sbci	r23, 0xFF	; 255
     932:	82 e0       	ldi	r24, 0x02	; 2
     934:	79 dc       	rcall	.-1806   	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(3, selC);
     936:	be 01       	movw	r22, r28
     938:	67 5e       	subi	r22, 0xE7	; 231
     93a:	7f 4f       	sbci	r23, 0xFF	; 255
     93c:	83 e0       	ldi	r24, 0x03	; 3
     93e:	74 dc       	rcall	.-1816   	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(4, selU);
     940:	be 01       	movw	r22, r28
     942:	6f 5d       	subi	r22, 0xDF	; 223
     944:	7f 4f       	sbci	r23, 0xFF	; 255
     946:	84 e0       	ldi	r24, 0x04	; 4
     948:	6f dc       	rcall	.-1826   	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(5, selL);
     94a:	be 01       	movw	r22, r28
     94c:	67 5d       	subi	r22, 0xD7	; 215
     94e:	7f 4f       	sbci	r23, 0xFF	; 255
     950:	85 e0       	ldi	r24, 0x05	; 5
     952:	6a dc       	rcall	.-1836   	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(6, selT);
     954:	be 01       	movw	r22, r28
     956:	6f 5c       	subi	r22, 0xCF	; 207
     958:	7f 4f       	sbci	r23, 0xFF	; 255
     95a:	86 e0       	ldi	r24, 0x06	; 6
     95c:	65 dc       	rcall	.-1846   	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(7, selY);
     95e:	be 01       	movw	r22, r28
     960:	67 5c       	subi	r22, 0xC7	; 199
     962:	7f 4f       	sbci	r23, 0xFF	; 255
     964:	87 e0       	ldi	r24, 0x07	; 7
	
	unsigned char cur = 1;		// initialize cursor to 1
	
	LCD_Cursor(cur++);
     966:	60 dc       	rcall	.-1856   	; 0x228 <LCD_Custom_Char>
     968:	81 e0       	ldi	r24, 0x01	; 1
	LCD_WriteData('P');
     96a:	cd db       	rcall	.-2150   	; 0x106 <LCD_Cursor>
     96c:	80 e5       	ldi	r24, 0x50	; 80
	LCD_Cursor(cur++);
     96e:	e2 db       	rcall	.-2108   	; 0x134 <LCD_WriteData>
     970:	82 e0       	ldi	r24, 0x02	; 2
	LCD_WriteData('L');
     972:	c9 db       	rcall	.-2158   	; 0x106 <LCD_Cursor>
     974:	8c e4       	ldi	r24, 0x4C	; 76
	LCD_Cursor(cur++);
     976:	de db       	rcall	.-2116   	; 0x134 <LCD_WriteData>
     978:	83 e0       	ldi	r24, 0x03	; 3
	LCD_WriteData('A');
     97a:	c5 db       	rcall	.-2166   	; 0x106 <LCD_Cursor>
     97c:	81 e4       	ldi	r24, 0x41	; 65
	LCD_Cursor(cur++);
     97e:	da db       	rcall	.-2124   	; 0x134 <LCD_WriteData>
     980:	84 e0       	ldi	r24, 0x04	; 4
	LCD_WriteData('Y');
     982:	c1 db       	rcall	.-2174   	; 0x106 <LCD_Cursor>
     984:	89 e5       	ldi	r24, 0x59	; 89
	LCD_Cursor(cur++);
     986:	d6 db       	rcall	.-2132   	; 0x134 <LCD_WriteData>
     988:	85 e0       	ldi	r24, 0x05	; 5
	LCD_WriteData(' ');
     98a:	bd db       	rcall	.-2182   	; 0x106 <LCD_Cursor>
     98c:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     98e:	d2 db       	rcall	.-2140   	; 0x134 <LCD_WriteData>
     990:	86 e0       	ldi	r24, 0x06	; 6
	LCD_WriteData(' ');
     992:	b9 db       	rcall	.-2190   	; 0x106 <LCD_Cursor>
     994:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     996:	ce db       	rcall	.-2148   	; 0x134 <LCD_WriteData>
     998:	87 e0       	ldi	r24, 0x07	; 7
	LCD_WriteData(0);
     99a:	b5 db       	rcall	.-2198   	; 0x106 <LCD_Cursor>
     99c:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Cursor(cur++);
     99e:	ca db       	rcall	.-2156   	; 0x134 <LCD_WriteData>
     9a0:	88 e0       	ldi	r24, 0x08	; 8
	LCD_WriteData(1);
     9a2:	b1 db       	rcall	.-2206   	; 0x106 <LCD_Cursor>
     9a4:	81 e0       	ldi	r24, 0x01	; 1
	LCD_Cursor(cur++);
     9a6:	c6 db       	rcall	.-2164   	; 0x134 <LCD_WriteData>
     9a8:	89 e0       	ldi	r24, 0x09	; 9
	LCD_WriteData(2);
     9aa:	ad db       	rcall	.-2214   	; 0x106 <LCD_Cursor>
     9ac:	82 e0       	ldi	r24, 0x02	; 2
	LCD_Cursor(cur++);
     9ae:	c2 db       	rcall	.-2172   	; 0x134 <LCD_WriteData>
     9b0:	8a e0       	ldi	r24, 0x0A	; 10
	LCD_WriteData(2);
     9b2:	a9 db       	rcall	.-2222   	; 0x106 <LCD_Cursor>
     9b4:	82 e0       	ldi	r24, 0x02	; 2
	LCD_Cursor(cur++);
     9b6:	be db       	rcall	.-2180   	; 0x134 <LCD_WriteData>
     9b8:	8b e0       	ldi	r24, 0x0B	; 11
	LCD_WriteData(1);
     9ba:	a5 db       	rcall	.-2230   	; 0x106 <LCD_Cursor>
     9bc:	81 e0       	ldi	r24, 0x01	; 1
	LCD_Cursor(cur++);
     9be:	ba db       	rcall	.-2188   	; 0x134 <LCD_WriteData>
     9c0:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_WriteData(3);
     9c2:	a1 db       	rcall	.-2238   	; 0x106 <LCD_Cursor>
     9c4:	83 e0       	ldi	r24, 0x03	; 3
	LCD_Cursor(cur++);
     9c6:	b6 db       	rcall	.-2196   	; 0x134 <LCD_WriteData>
     9c8:	8d e0       	ldi	r24, 0x0D	; 13
	LCD_WriteData(4);
     9ca:	9d db       	rcall	.-2246   	; 0x106 <LCD_Cursor>
     9cc:	84 e0       	ldi	r24, 0x04	; 4
	LCD_Cursor(cur++);
     9ce:	b2 db       	rcall	.-2204   	; 0x134 <LCD_WriteData>
     9d0:	8e e0       	ldi	r24, 0x0E	; 14
	LCD_WriteData(5);
     9d2:	99 db       	rcall	.-2254   	; 0x106 <LCD_Cursor>
     9d4:	85 e0       	ldi	r24, 0x05	; 5
	LCD_Cursor(cur++);
     9d6:	ae db       	rcall	.-2212   	; 0x134 <LCD_WriteData>
     9d8:	8f e0       	ldi	r24, 0x0F	; 15
	LCD_WriteData(6);
     9da:	95 db       	rcall	.-2262   	; 0x106 <LCD_Cursor>
     9dc:	86 e0       	ldi	r24, 0x06	; 6
	LCD_Cursor(cur++);
     9de:	aa db       	rcall	.-2220   	; 0x134 <LCD_WriteData>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
	LCD_WriteData(7);
     9e2:	91 db       	rcall	.-2270   	; 0x106 <LCD_Cursor>
     9e4:	87 e0       	ldi	r24, 0x07	; 7
	LCD_Cursor(cur++);		// Newline here
     9e6:	a6 db       	rcall	.-2228   	; 0x134 <LCD_WriteData>
     9e8:	81 e1       	ldi	r24, 0x11	; 17
	LCD_WriteData('T');
     9ea:	8d db       	rcall	.-2278   	; 0x106 <LCD_Cursor>
     9ec:	84 e5       	ldi	r24, 0x54	; 84
	LCD_Cursor(cur++);
     9ee:	a2 db       	rcall	.-2236   	; 0x134 <LCD_WriteData>
     9f0:	82 e1       	ldi	r24, 0x12	; 18
	LCD_WriteData('I');
     9f2:	89 db       	rcall	.-2286   	; 0x106 <LCD_Cursor>
     9f4:	89 e4       	ldi	r24, 0x49	; 73
	LCD_Cursor(cur++);
     9f6:	9e db       	rcall	.-2244   	; 0x134 <LCD_WriteData>
     9f8:	83 e1       	ldi	r24, 0x13	; 19
	LCD_WriteData('M');
     9fa:	85 db       	rcall	.-2294   	; 0x106 <LCD_Cursor>
     9fc:	8d e4       	ldi	r24, 0x4D	; 77
	LCD_Cursor(cur++);
     9fe:	9a db       	rcall	.-2252   	; 0x134 <LCD_WriteData>
     a00:	84 e1       	ldi	r24, 0x14	; 20
	LCD_WriteData('E');
     a02:	81 db       	rcall	.-2302   	; 0x106 <LCD_Cursor>
     a04:	85 e4       	ldi	r24, 0x45	; 69
	LCD_Cursor(cur++);
     a06:	96 db       	rcall	.-2260   	; 0x134 <LCD_WriteData>
     a08:	85 e1       	ldi	r24, 0x15	; 21
     a0a:	7d db       	rcall	.-2310   	; 0x106 <LCD_Cursor>
	LCD_WriteData(' ');
     a0c:	80 e2       	ldi	r24, 0x20	; 32
     a0e:	92 db       	rcall	.-2268   	; 0x134 <LCD_WriteData>
     a10:	86 e1       	ldi	r24, 0x16	; 22
	LCD_Cursor(cur++);
     a12:	79 db       	rcall	.-2318   	; 0x106 <LCD_Cursor>
     a14:	80 e2       	ldi	r24, 0x20	; 32
     a16:	8e db       	rcall	.-2276   	; 0x134 <LCD_WriteData>
	LCD_WriteData(' ');
     a18:	87 e1       	ldi	r24, 0x17	; 23
     a1a:	75 db       	rcall	.-2326   	; 0x106 <LCD_Cursor>
     a1c:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     a1e:	8a db       	rcall	.-2284   	; 0x134 <LCD_WriteData>
     a20:	88 e1       	ldi	r24, 0x18	; 24
     a22:	71 db       	rcall	.-2334   	; 0x106 <LCD_Cursor>
	LCD_WriteData(' ');
     a24:	80 e2       	ldi	r24, 0x20	; 32
     a26:	86 db       	rcall	.-2292   	; 0x134 <LCD_WriteData>
     a28:	89 e1       	ldi	r24, 0x19	; 25
	LCD_Cursor(cur++);
     a2a:	6d db       	rcall	.-2342   	; 0x106 <LCD_Cursor>
     a2c:	80 e2       	ldi	r24, 0x20	; 32
     a2e:	82 db       	rcall	.-2300   	; 0x134 <LCD_WriteData>
	LCD_WriteData(' ');
     a30:	8a e1       	ldi	r24, 0x1A	; 26
     a32:	69 db       	rcall	.-2350   	; 0x106 <LCD_Cursor>
     a34:	82 e3       	ldi	r24, 0x32	; 50
	LCD_Cursor(cur++);
     a36:	7e db       	rcall	.-2308   	; 0x134 <LCD_WriteData>
     a38:	8b e1       	ldi	r24, 0x1B	; 27
     a3a:	65 db       	rcall	.-2358   	; 0x106 <LCD_Cursor>
	LCD_WriteData(' ');
     a3c:	80 e5       	ldi	r24, 0x50	; 80
     a3e:	7a db       	rcall	.-2316   	; 0x134 <LCD_WriteData>
     a40:	8c e1       	ldi	r24, 0x1C	; 28
	LCD_Cursor(cur++);
     a42:	61 db       	rcall	.-2366   	; 0x106 <LCD_Cursor>
     a44:	8c e4       	ldi	r24, 0x4C	; 76
     a46:	76 db       	rcall	.-2324   	; 0x134 <LCD_WriteData>
	LCD_WriteData('2');
     a48:	8d e1       	ldi	r24, 0x1D	; 29
     a4a:	5d db       	rcall	.-2374   	; 0x106 <LCD_Cursor>
     a4c:	81 e4       	ldi	r24, 0x41	; 65
	LCD_Cursor(cur++);
     a4e:	72 db       	rcall	.-2332   	; 0x134 <LCD_WriteData>
     a50:	8e e1       	ldi	r24, 0x1E	; 30
     a52:	59 db       	rcall	.-2382   	; 0x106 <LCD_Cursor>
	LCD_WriteData('P');
     a54:	89 e5       	ldi	r24, 0x59	; 89
     a56:	6e db       	rcall	.-2340   	; 0x134 <LCD_WriteData>
     a58:	8f e1       	ldi	r24, 0x1F	; 31
	LCD_Cursor(cur++);
     a5a:	55 db       	rcall	.-2390   	; 0x106 <LCD_Cursor>
     a5c:	85 e4       	ldi	r24, 0x45	; 69
     a5e:	6a db       	rcall	.-2348   	; 0x134 <LCD_WriteData>
	LCD_WriteData('L');
     a60:	80 e2       	ldi	r24, 0x20	; 32
     a62:	51 db       	rcall	.-2398   	; 0x106 <LCD_Cursor>
     a64:	82 e5       	ldi	r24, 0x52	; 82
	LCD_Cursor(cur++);
     a66:	66 db       	rcall	.-2356   	; 0x134 <LCD_WriteData>
     a68:	c0 5c       	subi	r28, 0xC0	; 192
     a6a:	df 4f       	sbci	r29, 0xFF	; 255
	LCD_WriteData('A');
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	f8 94       	cli
     a70:	de bf       	out	0x3e, r29	; 62
	LCD_Cursor(cur++);
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	cd bf       	out	0x3d, r28	; 61
     a76:	df 91       	pop	r29
	LCD_WriteData('Y');
     a78:	cf 91       	pop	r28
     a7a:	08 95       	ret

00000a7c <dispTopLeft>:
     a7c:	cf 93       	push	r28
	LCD_Cursor(cur++);
     a7e:	df 93       	push	r29
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
	LCD_WriteData('E');
     a84:	a0 97       	sbiw	r28, 0x20	; 32
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	f8 94       	cli
	LCD_Cursor(cur++);
     a8a:	de bf       	out	0x3e, r29	; 62
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteData('R');
     a90:	88 e0       	ldi	r24, 0x08	; 8
     a92:	e6 e7       	ldi	r30, 0x76	; 118
     a94:	f1 e0       	ldi	r31, 0x01	; 1
}
     a96:	de 01       	movw	r26, r28
     a98:	11 96       	adiw	r26, 0x01	; 1
     a9a:	01 90       	ld	r0, Z+
     a9c:	0d 92       	st	X+, r0
     a9e:	8a 95       	dec	r24
     aa0:	e1 f7       	brne	.-8      	; 0xa9a <dispTopLeft+0x1e>
     aa2:	88 e0       	ldi	r24, 0x08	; 8
     aa4:	e6 e6       	ldi	r30, 0x66	; 102
     aa6:	f1 e0       	ldi	r31, 0x01	; 1
     aa8:	de 01       	movw	r26, r28
void dispTopLeft(){
	// PLAY highlighted in the top left
	
	unsigned char selP[8] = {0x1f, 0x11, 0x15, 0x11, 0x17, 0x17, 0x1f, 0x00};
	unsigned char selL[8] = {0x1f, 0x17, 0x17, 0x17, 0x17, 0x11, 0x1f, 0x00};
     aaa:	19 96       	adiw	r26, 0x09	; 9
     aac:	01 90       	ld	r0, Z+
     aae:	0d 92       	st	X+, r0
     ab0:	8a 95       	dec	r24
     ab2:	e1 f7       	brne	.-8      	; 0xaac <dispTopLeft+0x30>
	unsigned char selA[8] = {0x1f, 0x1b, 0x15, 0x11, 0x15, 0x15, 0x1f, 0x00};
     ab4:	88 e0       	ldi	r24, 0x08	; 8
     ab6:	ee e0       	ldi	r30, 0x0E	; 14
     ab8:	f1 e0       	ldi	r31, 0x01	; 1
     aba:	de 01       	movw	r26, r28
     abc:	51 96       	adiw	r26, 0x11	; 17
     abe:	01 90       	ld	r0, Z+
     ac0:	0d 92       	st	X+, r0
     ac2:	8a 95       	dec	r24
     ac4:	e1 f7       	brne	.-8      	; 0xabe <dispTopLeft+0x42>
	unsigned char selY[8] = {0x1f, 0x15, 0x15, 0x1b, 0x1b, 0x1b, 0x1f, 0x00};
     ac6:	88 e0       	ldi	r24, 0x08	; 8
     ac8:	ee e1       	ldi	r30, 0x1E	; 30
     aca:	f1 e0       	ldi	r31, 0x01	; 1
     acc:	de 01       	movw	r26, r28
     ace:	59 96       	adiw	r26, 0x19	; 25
     ad0:	01 90       	ld	r0, Z+
     ad2:	0d 92       	st	X+, r0
     ad4:	8a 95       	dec	r24
     ad6:	e1 f7       	brne	.-8      	; 0xad0 <dispTopLeft+0x54>
		
	LCD_Custom_Char(0, selP);		// build P at position 0...
     ad8:	be 01       	movw	r22, r28
     ada:	6f 5f       	subi	r22, 0xFF	; 255
     adc:	7f 4f       	sbci	r23, 0xFF	; 255
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	a3 db       	rcall	.-2234   	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(1, selL);
     ae2:	be 01       	movw	r22, r28
     ae4:	67 5f       	subi	r22, 0xF7	; 247
     ae6:	7f 4f       	sbci	r23, 0xFF	; 255
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	9e db       	rcall	.-2244   	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(2, selA);
     aec:	be 01       	movw	r22, r28
     aee:	6f 5e       	subi	r22, 0xEF	; 239
     af0:	7f 4f       	sbci	r23, 0xFF	; 255
     af2:	82 e0       	ldi	r24, 0x02	; 2
     af4:	99 db       	rcall	.-2254   	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(3, selY);
     af6:	be 01       	movw	r22, r28
     af8:	67 5e       	subi	r22, 0xE7	; 231
     afa:	7f 4f       	sbci	r23, 0xFF	; 255
     afc:	83 e0       	ldi	r24, 0x03	; 3
	
	unsigned char cur = 1;		// initialize cursor to 1
	
	LCD_Cursor(cur++);
     afe:	94 db       	rcall	.-2264   	; 0x228 <LCD_Custom_Char>
     b00:	81 e0       	ldi	r24, 0x01	; 1
	LCD_WriteData(0);
     b02:	01 db       	rcall	.-2558   	; 0x106 <LCD_Cursor>
     b04:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Cursor(cur++);
     b06:	16 db       	rcall	.-2516   	; 0x134 <LCD_WriteData>
     b08:	82 e0       	ldi	r24, 0x02	; 2
	LCD_WriteData(1);
     b0a:	fd da       	rcall	.-2566   	; 0x106 <LCD_Cursor>
     b0c:	81 e0       	ldi	r24, 0x01	; 1
	LCD_Cursor(cur++);
     b0e:	12 db       	rcall	.-2524   	; 0x134 <LCD_WriteData>
     b10:	83 e0       	ldi	r24, 0x03	; 3
	LCD_WriteData(2);
     b12:	f9 da       	rcall	.-2574   	; 0x106 <LCD_Cursor>
     b14:	82 e0       	ldi	r24, 0x02	; 2
	LCD_Cursor(cur++);
     b16:	0e db       	rcall	.-2532   	; 0x134 <LCD_WriteData>
     b18:	84 e0       	ldi	r24, 0x04	; 4
	LCD_WriteData(3);
     b1a:	f5 da       	rcall	.-2582   	; 0x106 <LCD_Cursor>
     b1c:	83 e0       	ldi	r24, 0x03	; 3
	LCD_Cursor(cur++);
     b1e:	0a db       	rcall	.-2540   	; 0x134 <LCD_WriteData>
     b20:	85 e0       	ldi	r24, 0x05	; 5
	LCD_WriteData(' ');	
     b22:	f1 da       	rcall	.-2590   	; 0x106 <LCD_Cursor>
     b24:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     b26:	06 db       	rcall	.-2548   	; 0x134 <LCD_WriteData>
     b28:	86 e0       	ldi	r24, 0x06	; 6
	LCD_WriteData(' ');
     b2a:	ed da       	rcall	.-2598   	; 0x106 <LCD_Cursor>
     b2c:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     b2e:	02 db       	rcall	.-2556   	; 0x134 <LCD_WriteData>
     b30:	87 e0       	ldi	r24, 0x07	; 7
	LCD_WriteData('D');
     b32:	e9 da       	rcall	.-2606   	; 0x106 <LCD_Cursor>
     b34:	84 e4       	ldi	r24, 0x44	; 68
	LCD_Cursor(cur++);
     b36:	fe da       	rcall	.-2564   	; 0x134 <LCD_WriteData>
     b38:	88 e0       	ldi	r24, 0x08	; 8
	LCD_WriteData('I');
     b3a:	e5 da       	rcall	.-2614   	; 0x106 <LCD_Cursor>
     b3c:	89 e4       	ldi	r24, 0x49	; 73
	LCD_Cursor(cur++);
     b3e:	fa da       	rcall	.-2572   	; 0x134 <LCD_WriteData>
     b40:	89 e0       	ldi	r24, 0x09	; 9
	LCD_WriteData('F');
     b42:	e1 da       	rcall	.-2622   	; 0x106 <LCD_Cursor>
     b44:	86 e4       	ldi	r24, 0x46	; 70
	LCD_Cursor(cur++);
     b46:	f6 da       	rcall	.-2580   	; 0x134 <LCD_WriteData>
     b48:	8a e0       	ldi	r24, 0x0A	; 10
	LCD_WriteData('F');
     b4a:	dd da       	rcall	.-2630   	; 0x106 <LCD_Cursor>
     b4c:	86 e4       	ldi	r24, 0x46	; 70
	LCD_Cursor(cur++);
     b4e:	f2 da       	rcall	.-2588   	; 0x134 <LCD_WriteData>
     b50:	8b e0       	ldi	r24, 0x0B	; 11
	LCD_WriteData('I');
     b52:	d9 da       	rcall	.-2638   	; 0x106 <LCD_Cursor>
     b54:	89 e4       	ldi	r24, 0x49	; 73
	LCD_Cursor(cur++);
     b56:	ee da       	rcall	.-2596   	; 0x134 <LCD_WriteData>
     b58:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_WriteData('C');
     b5a:	d5 da       	rcall	.-2646   	; 0x106 <LCD_Cursor>
     b5c:	83 e4       	ldi	r24, 0x43	; 67
	LCD_Cursor(cur++);
     b5e:	ea da       	rcall	.-2604   	; 0x134 <LCD_WriteData>
     b60:	8d e0       	ldi	r24, 0x0D	; 13
	LCD_WriteData('U');
     b62:	d1 da       	rcall	.-2654   	; 0x106 <LCD_Cursor>
     b64:	85 e5       	ldi	r24, 0x55	; 85
	LCD_Cursor(cur++);
     b66:	e6 da       	rcall	.-2612   	; 0x134 <LCD_WriteData>
     b68:	8e e0       	ldi	r24, 0x0E	; 14
	LCD_WriteData('L');
     b6a:	cd da       	rcall	.-2662   	; 0x106 <LCD_Cursor>
     b6c:	8c e4       	ldi	r24, 0x4C	; 76
	LCD_Cursor(cur++);
     b6e:	e2 da       	rcall	.-2620   	; 0x134 <LCD_WriteData>
     b70:	8f e0       	ldi	r24, 0x0F	; 15
	LCD_WriteData('T');
     b72:	c9 da       	rcall	.-2670   	; 0x106 <LCD_Cursor>
     b74:	84 e5       	ldi	r24, 0x54	; 84
	LCD_Cursor(cur++);
     b76:	de da       	rcall	.-2628   	; 0x134 <LCD_WriteData>
     b78:	80 e1       	ldi	r24, 0x10	; 16
	LCD_WriteData('Y');
     b7a:	c5 da       	rcall	.-2678   	; 0x106 <LCD_Cursor>
     b7c:	89 e5       	ldi	r24, 0x59	; 89
	LCD_Cursor(cur++);		// Newline here
     b7e:	da da       	rcall	.-2636   	; 0x134 <LCD_WriteData>
     b80:	81 e1       	ldi	r24, 0x11	; 17
	LCD_WriteData('T');
     b82:	c1 da       	rcall	.-2686   	; 0x106 <LCD_Cursor>
     b84:	84 e5       	ldi	r24, 0x54	; 84
	LCD_Cursor(cur++);
     b86:	d6 da       	rcall	.-2644   	; 0x134 <LCD_WriteData>
     b88:	82 e1       	ldi	r24, 0x12	; 18
	LCD_WriteData('I');
     b8a:	bd da       	rcall	.-2694   	; 0x106 <LCD_Cursor>
     b8c:	89 e4       	ldi	r24, 0x49	; 73
	LCD_Cursor(cur++);
     b8e:	d2 da       	rcall	.-2652   	; 0x134 <LCD_WriteData>
     b90:	83 e1       	ldi	r24, 0x13	; 19
	LCD_WriteData('M');
     b92:	b9 da       	rcall	.-2702   	; 0x106 <LCD_Cursor>
     b94:	8d e4       	ldi	r24, 0x4D	; 77
	LCD_Cursor(cur++);
     b96:	ce da       	rcall	.-2660   	; 0x134 <LCD_WriteData>
     b98:	84 e1       	ldi	r24, 0x14	; 20
	LCD_WriteData('E');
     b9a:	b5 da       	rcall	.-2710   	; 0x106 <LCD_Cursor>
     b9c:	85 e4       	ldi	r24, 0x45	; 69
	LCD_Cursor(cur++);
     b9e:	ca da       	rcall	.-2668   	; 0x134 <LCD_WriteData>
     ba0:	85 e1       	ldi	r24, 0x15	; 21
	LCD_WriteData(' ');
     ba2:	b1 da       	rcall	.-2718   	; 0x106 <LCD_Cursor>
     ba4:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     ba6:	c6 da       	rcall	.-2676   	; 0x134 <LCD_WriteData>
     ba8:	86 e1       	ldi	r24, 0x16	; 22
     baa:	ad da       	rcall	.-2726   	; 0x106 <LCD_Cursor>
	LCD_WriteData(' ');
     bac:	80 e2       	ldi	r24, 0x20	; 32
     bae:	c2 da       	rcall	.-2684   	; 0x134 <LCD_WriteData>
     bb0:	87 e1       	ldi	r24, 0x17	; 23
	LCD_Cursor(cur++);
     bb2:	a9 da       	rcall	.-2734   	; 0x106 <LCD_Cursor>
     bb4:	80 e2       	ldi	r24, 0x20	; 32
     bb6:	be da       	rcall	.-2692   	; 0x134 <LCD_WriteData>
	LCD_WriteData(' ');
     bb8:	88 e1       	ldi	r24, 0x18	; 24
     bba:	a5 da       	rcall	.-2742   	; 0x106 <LCD_Cursor>
     bbc:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     bbe:	ba da       	rcall	.-2700   	; 0x134 <LCD_WriteData>
     bc0:	89 e1       	ldi	r24, 0x19	; 25
     bc2:	a1 da       	rcall	.-2750   	; 0x106 <LCD_Cursor>
	LCD_WriteData(' ');
     bc4:	80 e2       	ldi	r24, 0x20	; 32
     bc6:	b6 da       	rcall	.-2708   	; 0x134 <LCD_WriteData>
     bc8:	8a e1       	ldi	r24, 0x1A	; 26
	LCD_Cursor(cur++);
     bca:	9d da       	rcall	.-2758   	; 0x106 <LCD_Cursor>
     bcc:	82 e3       	ldi	r24, 0x32	; 50
     bce:	b2 da       	rcall	.-2716   	; 0x134 <LCD_WriteData>
	LCD_WriteData(' ');
     bd0:	8b e1       	ldi	r24, 0x1B	; 27
     bd2:	99 da       	rcall	.-2766   	; 0x106 <LCD_Cursor>
     bd4:	80 e5       	ldi	r24, 0x50	; 80
	LCD_Cursor(cur++);
     bd6:	ae da       	rcall	.-2724   	; 0x134 <LCD_WriteData>
     bd8:	8c e1       	ldi	r24, 0x1C	; 28
     bda:	95 da       	rcall	.-2774   	; 0x106 <LCD_Cursor>
	LCD_WriteData('2');
     bdc:	8c e4       	ldi	r24, 0x4C	; 76
     bde:	aa da       	rcall	.-2732   	; 0x134 <LCD_WriteData>
     be0:	8d e1       	ldi	r24, 0x1D	; 29
	LCD_Cursor(cur++);
     be2:	91 da       	rcall	.-2782   	; 0x106 <LCD_Cursor>
     be4:	81 e4       	ldi	r24, 0x41	; 65
     be6:	a6 da       	rcall	.-2740   	; 0x134 <LCD_WriteData>
	LCD_WriteData('P');
     be8:	8e e1       	ldi	r24, 0x1E	; 30
     bea:	8d da       	rcall	.-2790   	; 0x106 <LCD_Cursor>
     bec:	89 e5       	ldi	r24, 0x59	; 89
	LCD_Cursor(cur++);
     bee:	a2 da       	rcall	.-2748   	; 0x134 <LCD_WriteData>
     bf0:	8f e1       	ldi	r24, 0x1F	; 31
     bf2:	89 da       	rcall	.-2798   	; 0x106 <LCD_Cursor>
	LCD_WriteData('L');
     bf4:	85 e4       	ldi	r24, 0x45	; 69
     bf6:	9e da       	rcall	.-2756   	; 0x134 <LCD_WriteData>
     bf8:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     bfa:	85 da       	rcall	.-2806   	; 0x106 <LCD_Cursor>
     bfc:	82 e5       	ldi	r24, 0x52	; 82
     bfe:	9a da       	rcall	.-2764   	; 0x134 <LCD_WriteData>
	LCD_WriteData('A');
     c00:	a0 96       	adiw	r28, 0x20	; 32
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
	LCD_Cursor(cur++);
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteData('Y');
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	08 95       	ret

00000c12 <dispBottomRight>:
	LCD_Cursor(cur++);
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	cd b7       	in	r28, 0x3d	; 61
	LCD_WriteData('E');
     c18:	de b7       	in	r29, 0x3e	; 62
     c1a:	e8 97       	sbiw	r28, 0x38	; 56
     c1c:	0f b6       	in	r0, 0x3f	; 63
	LCD_Cursor(cur++);
     c1e:	f8 94       	cli
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	0f be       	out	0x3f, r0	; 63
	LCD_WriteData('R');
     c24:	cd bf       	out	0x3d, r28	; 61
     c26:	88 e0       	ldi	r24, 0x08	; 8
     c28:	ee e7       	ldi	r30, 0x7E	; 126
}
     c2a:	f1 e0       	ldi	r31, 0x01	; 1
     c2c:	de 01       	movw	r26, r28
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	01 90       	ld	r0, Z+
     c32:	0d 92       	st	X+, r0
     c34:	8a 95       	dec	r24
     c36:	e1 f7       	brne	.-8      	; 0xc30 <dispBottomRight+0x1e>
     c38:	88 e0       	ldi	r24, 0x08	; 8
     c3a:	e6 e7       	ldi	r30, 0x76	; 118
void dispBottomRight(){
	// 2PLAYER highlighted in the bottom right
	
	unsigned char sel2[8] = {0x1f, 0x13, 0x1d, 0x1d, 0x1b, 0x11, 0x1f, 0x00};
	unsigned char selP[8] = {0x1f, 0x11, 0x15, 0x11, 0x17, 0x17, 0x1f, 0x00};
     c3c:	f1 e0       	ldi	r31, 0x01	; 1
     c3e:	de 01       	movw	r26, r28
     c40:	19 96       	adiw	r26, 0x09	; 9
     c42:	01 90       	ld	r0, Z+
     c44:	0d 92       	st	X+, r0
     c46:	8a 95       	dec	r24
     c48:	e1 f7       	brne	.-8      	; 0xc42 <dispBottomRight+0x30>
	unsigned char selL[8] = {0x1f, 0x17, 0x17, 0x17, 0x17, 0x11, 0x1f, 0x00};
     c4a:	88 e0       	ldi	r24, 0x08	; 8
     c4c:	e6 e6       	ldi	r30, 0x66	; 102
     c4e:	f1 e0       	ldi	r31, 0x01	; 1
     c50:	de 01       	movw	r26, r28
     c52:	51 96       	adiw	r26, 0x11	; 17
     c54:	01 90       	ld	r0, Z+
     c56:	0d 92       	st	X+, r0
     c58:	8a 95       	dec	r24
     c5a:	e1 f7       	brne	.-8      	; 0xc54 <dispBottomRight+0x42>
	unsigned char selA[8] = {0x1f, 0x1b, 0x15, 0x11, 0x15, 0x15, 0x1f, 0x00};
     c5c:	88 e0       	ldi	r24, 0x08	; 8
     c5e:	ee e0       	ldi	r30, 0x0E	; 14
     c60:	f1 e0       	ldi	r31, 0x01	; 1
     c62:	de 01       	movw	r26, r28
     c64:	59 96       	adiw	r26, 0x19	; 25
     c66:	01 90       	ld	r0, Z+
     c68:	0d 92       	st	X+, r0
     c6a:	8a 95       	dec	r24
     c6c:	e1 f7       	brne	.-8      	; 0xc66 <dispBottomRight+0x54>
	unsigned char selY[8] = {0x1f, 0x15, 0x15, 0x1b, 0x1b, 0x1b, 0x1f, 0x00};
     c6e:	88 e0       	ldi	r24, 0x08	; 8
     c70:	ee e1       	ldi	r30, 0x1E	; 30
     c72:	f1 e0       	ldi	r31, 0x01	; 1
     c74:	de 01       	movw	r26, r28
     c76:	91 96       	adiw	r26, 0x21	; 33
     c78:	01 90       	ld	r0, Z+
     c7a:	0d 92       	st	X+, r0
     c7c:	8a 95       	dec	r24
     c7e:	e1 f7       	brne	.-8      	; 0xc78 <dispBottomRight+0x66>
	unsigned char selE[8] = {0x1f, 0x11, 0x17, 0x13, 0x17, 0x11, 0x1f, 0x00};
     c80:	88 e0       	ldi	r24, 0x08	; 8
     c82:	e6 e0       	ldi	r30, 0x06	; 6
     c84:	f1 e0       	ldi	r31, 0x01	; 1
     c86:	de 01       	movw	r26, r28
     c88:	99 96       	adiw	r26, 0x29	; 41
     c8a:	01 90       	ld	r0, Z+
     c8c:	0d 92       	st	X+, r0
     c8e:	8a 95       	dec	r24
     c90:	e1 f7       	brne	.-8      	; 0xc8a <dispBottomRight+0x78>
	unsigned char selR[8] = {0x1f, 0x13, 0x15, 0x13, 0x15, 0x15, 0x1f, 0x00};
     c92:	88 e0       	ldi	r24, 0x08	; 8
     c94:	ee e4       	ldi	r30, 0x4E	; 78
     c96:	f1 e0       	ldi	r31, 0x01	; 1
     c98:	de 01       	movw	r26, r28
     c9a:	d1 96       	adiw	r26, 0x31	; 49
     c9c:	01 90       	ld	r0, Z+
     c9e:	0d 92       	st	X+, r0
     ca0:	8a 95       	dec	r24
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <dispBottomRight+0x8a>
	
	LCD_Custom_Char(0, sel2);		// build T at position 0...
     ca4:	be 01       	movw	r22, r28
     ca6:	6f 5f       	subi	r22, 0xFF	; 255
     ca8:	7f 4f       	sbci	r23, 0xFF	; 255
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	bd da       	rcall	.-2694   	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(1, selP);
     cae:	be 01       	movw	r22, r28
     cb0:	67 5f       	subi	r22, 0xF7	; 247
     cb2:	7f 4f       	sbci	r23, 0xFF	; 255
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	b8 da       	rcall	.-2704   	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(2, selL);
     cb8:	be 01       	movw	r22, r28
     cba:	6f 5e       	subi	r22, 0xEF	; 239
     cbc:	7f 4f       	sbci	r23, 0xFF	; 255
     cbe:	82 e0       	ldi	r24, 0x02	; 2
     cc0:	b3 da       	rcall	.-2714   	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(3, selA);
     cc2:	be 01       	movw	r22, r28
     cc4:	67 5e       	subi	r22, 0xE7	; 231
     cc6:	7f 4f       	sbci	r23, 0xFF	; 255
     cc8:	83 e0       	ldi	r24, 0x03	; 3
     cca:	ae da       	rcall	.-2724   	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(4, selY);
     ccc:	be 01       	movw	r22, r28
     cce:	6f 5d       	subi	r22, 0xDF	; 223
     cd0:	7f 4f       	sbci	r23, 0xFF	; 255
     cd2:	84 e0       	ldi	r24, 0x04	; 4
     cd4:	a9 da       	rcall	.-2734   	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(5, selE);
     cd6:	be 01       	movw	r22, r28
     cd8:	67 5d       	subi	r22, 0xD7	; 215
     cda:	7f 4f       	sbci	r23, 0xFF	; 255
     cdc:	85 e0       	ldi	r24, 0x05	; 5
     cde:	a4 da       	rcall	.-2744   	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(6, selR);
     ce0:	be 01       	movw	r22, r28
     ce2:	6f 5c       	subi	r22, 0xCF	; 207
     ce4:	7f 4f       	sbci	r23, 0xFF	; 255
     ce6:	86 e0       	ldi	r24, 0x06	; 6
	
	unsigned char cur = 1;		// initialize cursor to 1
	
	LCD_Cursor(cur++);
     ce8:	9f da       	rcall	.-2754   	; 0x228 <LCD_Custom_Char>
     cea:	81 e0       	ldi	r24, 0x01	; 1
	LCD_WriteData('P');
     cec:	0c da       	rcall	.-3048   	; 0x106 <LCD_Cursor>
     cee:	80 e5       	ldi	r24, 0x50	; 80
	LCD_Cursor(cur++);
     cf0:	21 da       	rcall	.-3006   	; 0x134 <LCD_WriteData>
     cf2:	82 e0       	ldi	r24, 0x02	; 2
	LCD_WriteData('L');
     cf4:	08 da       	rcall	.-3056   	; 0x106 <LCD_Cursor>
     cf6:	8c e4       	ldi	r24, 0x4C	; 76
	LCD_Cursor(cur++);
     cf8:	1d da       	rcall	.-3014   	; 0x134 <LCD_WriteData>
     cfa:	83 e0       	ldi	r24, 0x03	; 3
	LCD_WriteData('A');
     cfc:	04 da       	rcall	.-3064   	; 0x106 <LCD_Cursor>
     cfe:	81 e4       	ldi	r24, 0x41	; 65
	LCD_Cursor(cur++);
     d00:	19 da       	rcall	.-3022   	; 0x134 <LCD_WriteData>
     d02:	84 e0       	ldi	r24, 0x04	; 4
	LCD_WriteData('Y');
     d04:	00 da       	rcall	.-3072   	; 0x106 <LCD_Cursor>
     d06:	89 e5       	ldi	r24, 0x59	; 89
	LCD_Cursor(cur++);
     d08:	15 da       	rcall	.-3030   	; 0x134 <LCD_WriteData>
     d0a:	85 e0       	ldi	r24, 0x05	; 5
	LCD_WriteData(' ');
     d0c:	fc d9       	rcall	.-3080   	; 0x106 <LCD_Cursor>
     d0e:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     d10:	11 da       	rcall	.-3038   	; 0x134 <LCD_WriteData>
     d12:	86 e0       	ldi	r24, 0x06	; 6
	LCD_WriteData(' ');
     d14:	f8 d9       	rcall	.-3088   	; 0x106 <LCD_Cursor>
     d16:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     d18:	0d da       	rcall	.-3046   	; 0x134 <LCD_WriteData>
     d1a:	87 e0       	ldi	r24, 0x07	; 7
	LCD_WriteData('D');
     d1c:	f4 d9       	rcall	.-3096   	; 0x106 <LCD_Cursor>
     d1e:	84 e4       	ldi	r24, 0x44	; 68
	LCD_Cursor(cur++);
     d20:	09 da       	rcall	.-3054   	; 0x134 <LCD_WriteData>
     d22:	88 e0       	ldi	r24, 0x08	; 8
	LCD_WriteData('I');
     d24:	f0 d9       	rcall	.-3104   	; 0x106 <LCD_Cursor>
     d26:	89 e4       	ldi	r24, 0x49	; 73
	LCD_Cursor(cur++);
     d28:	05 da       	rcall	.-3062   	; 0x134 <LCD_WriteData>
     d2a:	89 e0       	ldi	r24, 0x09	; 9
	LCD_WriteData('F');
     d2c:	ec d9       	rcall	.-3112   	; 0x106 <LCD_Cursor>
     d2e:	86 e4       	ldi	r24, 0x46	; 70
	LCD_Cursor(cur++);
     d30:	01 da       	rcall	.-3070   	; 0x134 <LCD_WriteData>
     d32:	8a e0       	ldi	r24, 0x0A	; 10
	LCD_WriteData('F');
     d34:	e8 d9       	rcall	.-3120   	; 0x106 <LCD_Cursor>
     d36:	86 e4       	ldi	r24, 0x46	; 70
	LCD_Cursor(cur++);
     d38:	fd d9       	rcall	.-3078   	; 0x134 <LCD_WriteData>
     d3a:	8b e0       	ldi	r24, 0x0B	; 11
	LCD_WriteData('I');
     d3c:	e4 d9       	rcall	.-3128   	; 0x106 <LCD_Cursor>
     d3e:	89 e4       	ldi	r24, 0x49	; 73
	LCD_Cursor(cur++);
     d40:	f9 d9       	rcall	.-3086   	; 0x134 <LCD_WriteData>
     d42:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_WriteData('C');
     d44:	e0 d9       	rcall	.-3136   	; 0x106 <LCD_Cursor>
     d46:	83 e4       	ldi	r24, 0x43	; 67
	LCD_Cursor(cur++);
     d48:	f5 d9       	rcall	.-3094   	; 0x134 <LCD_WriteData>
     d4a:	8d e0       	ldi	r24, 0x0D	; 13
	LCD_WriteData('U');
     d4c:	dc d9       	rcall	.-3144   	; 0x106 <LCD_Cursor>
     d4e:	85 e5       	ldi	r24, 0x55	; 85
	LCD_Cursor(cur++);
     d50:	f1 d9       	rcall	.-3102   	; 0x134 <LCD_WriteData>
     d52:	8e e0       	ldi	r24, 0x0E	; 14
	LCD_WriteData('L');
     d54:	d8 d9       	rcall	.-3152   	; 0x106 <LCD_Cursor>
     d56:	8c e4       	ldi	r24, 0x4C	; 76
	LCD_Cursor(cur++);
     d58:	ed d9       	rcall	.-3110   	; 0x134 <LCD_WriteData>
     d5a:	8f e0       	ldi	r24, 0x0F	; 15
	LCD_WriteData('T');
     d5c:	d4 d9       	rcall	.-3160   	; 0x106 <LCD_Cursor>
     d5e:	84 e5       	ldi	r24, 0x54	; 84
	LCD_Cursor(cur++);
     d60:	e9 d9       	rcall	.-3118   	; 0x134 <LCD_WriteData>
     d62:	80 e1       	ldi	r24, 0x10	; 16
	LCD_WriteData('Y');
     d64:	d0 d9       	rcall	.-3168   	; 0x106 <LCD_Cursor>
     d66:	89 e5       	ldi	r24, 0x59	; 89
	LCD_Cursor(cur++);		// Newline here
     d68:	e5 d9       	rcall	.-3126   	; 0x134 <LCD_WriteData>
     d6a:	81 e1       	ldi	r24, 0x11	; 17
	LCD_WriteData('T');
     d6c:	cc d9       	rcall	.-3176   	; 0x106 <LCD_Cursor>
     d6e:	84 e5       	ldi	r24, 0x54	; 84
	LCD_Cursor(cur++);
     d70:	e1 d9       	rcall	.-3134   	; 0x134 <LCD_WriteData>
     d72:	82 e1       	ldi	r24, 0x12	; 18
	LCD_WriteData('I');
     d74:	c8 d9       	rcall	.-3184   	; 0x106 <LCD_Cursor>
     d76:	89 e4       	ldi	r24, 0x49	; 73
	LCD_Cursor(cur++);
     d78:	dd d9       	rcall	.-3142   	; 0x134 <LCD_WriteData>
     d7a:	83 e1       	ldi	r24, 0x13	; 19
	LCD_WriteData('M');
     d7c:	c4 d9       	rcall	.-3192   	; 0x106 <LCD_Cursor>
     d7e:	8d e4       	ldi	r24, 0x4D	; 77
	LCD_Cursor(cur++);
     d80:	d9 d9       	rcall	.-3150   	; 0x134 <LCD_WriteData>
     d82:	84 e1       	ldi	r24, 0x14	; 20
	LCD_WriteData('E');
     d84:	c0 d9       	rcall	.-3200   	; 0x106 <LCD_Cursor>
     d86:	85 e4       	ldi	r24, 0x45	; 69
	LCD_Cursor(cur++);
     d88:	d5 d9       	rcall	.-3158   	; 0x134 <LCD_WriteData>
     d8a:	85 e1       	ldi	r24, 0x15	; 21
	LCD_WriteData(' ');
     d8c:	bc d9       	rcall	.-3208   	; 0x106 <LCD_Cursor>
     d8e:	80 e2       	ldi	r24, 0x20	; 32
     d90:	d1 d9       	rcall	.-3166   	; 0x134 <LCD_WriteData>
	LCD_Cursor(cur++);
     d92:	86 e1       	ldi	r24, 0x16	; 22
     d94:	b8 d9       	rcall	.-3216   	; 0x106 <LCD_Cursor>
     d96:	80 e2       	ldi	r24, 0x20	; 32
	LCD_WriteData(' ');
     d98:	cd d9       	rcall	.-3174   	; 0x134 <LCD_WriteData>
     d9a:	87 e1       	ldi	r24, 0x17	; 23
     d9c:	b4 d9       	rcall	.-3224   	; 0x106 <LCD_Cursor>
	LCD_Cursor(cur++);
     d9e:	80 e2       	ldi	r24, 0x20	; 32
     da0:	c9 d9       	rcall	.-3182   	; 0x134 <LCD_WriteData>
     da2:	88 e1       	ldi	r24, 0x18	; 24
	LCD_WriteData(' ');
     da4:	b0 d9       	rcall	.-3232   	; 0x106 <LCD_Cursor>
     da6:	80 e2       	ldi	r24, 0x20	; 32
     da8:	c5 d9       	rcall	.-3190   	; 0x134 <LCD_WriteData>
	LCD_Cursor(cur++);
     daa:	89 e1       	ldi	r24, 0x19	; 25
     dac:	ac d9       	rcall	.-3240   	; 0x106 <LCD_Cursor>
     dae:	80 e2       	ldi	r24, 0x20	; 32
	LCD_WriteData(' ');
     db0:	c1 d9       	rcall	.-3198   	; 0x134 <LCD_WriteData>
     db2:	8a e1       	ldi	r24, 0x1A	; 26
     db4:	a8 d9       	rcall	.-3248   	; 0x106 <LCD_Cursor>
	LCD_Cursor(cur++);
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	bd d9       	rcall	.-3206   	; 0x134 <LCD_WriteData>
     dba:	8b e1       	ldi	r24, 0x1B	; 27
	LCD_WriteData(' ');
     dbc:	a4 d9       	rcall	.-3256   	; 0x106 <LCD_Cursor>
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	b9 d9       	rcall	.-3214   	; 0x134 <LCD_WriteData>
	LCD_Cursor(cur++);
     dc2:	8c e1       	ldi	r24, 0x1C	; 28
     dc4:	a0 d9       	rcall	.-3264   	; 0x106 <LCD_Cursor>
     dc6:	82 e0       	ldi	r24, 0x02	; 2
	LCD_WriteData(0);
     dc8:	b5 d9       	rcall	.-3222   	; 0x134 <LCD_WriteData>
     dca:	8d e1       	ldi	r24, 0x1D	; 29
     dcc:	9c d9       	rcall	.-3272   	; 0x106 <LCD_Cursor>
	LCD_Cursor(cur++);
     dce:	83 e0       	ldi	r24, 0x03	; 3
     dd0:	b1 d9       	rcall	.-3230   	; 0x134 <LCD_WriteData>
     dd2:	8e e1       	ldi	r24, 0x1E	; 30
	LCD_WriteData(1);
     dd4:	98 d9       	rcall	.-3280   	; 0x106 <LCD_Cursor>
     dd6:	84 e0       	ldi	r24, 0x04	; 4
     dd8:	ad d9       	rcall	.-3238   	; 0x134 <LCD_WriteData>
	LCD_Cursor(cur++);
     dda:	8f e1       	ldi	r24, 0x1F	; 31
     ddc:	94 d9       	rcall	.-3288   	; 0x106 <LCD_Cursor>
     dde:	85 e0       	ldi	r24, 0x05	; 5
	LCD_WriteData(2);
     de0:	a9 d9       	rcall	.-3246   	; 0x134 <LCD_WriteData>
     de2:	80 e2       	ldi	r24, 0x20	; 32
     de4:	90 d9       	rcall	.-3296   	; 0x106 <LCD_Cursor>
	LCD_Cursor(cur++);
     de6:	86 e0       	ldi	r24, 0x06	; 6
     de8:	a5 d9       	rcall	.-3254   	; 0x134 <LCD_WriteData>
     dea:	e8 96       	adiw	r28, 0x38	; 56
	LCD_WriteData(3);
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	de bf       	out	0x3e, r29	; 62
	LCD_Cursor(cur++);
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	cd bf       	out	0x3d, r28	; 61
     df6:	df 91       	pop	r29
	LCD_WriteData(4);
     df8:	cf 91       	pop	r28
     dfa:	08 95       	ret

00000dfc <dispBottomLeft>:
     dfc:	cf 93       	push	r28
	LCD_Cursor(cur++);
     dfe:	df 93       	push	r29
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
	LCD_WriteData(5);
     e04:	a0 97       	sbiw	r28, 0x20	; 32
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
	LCD_Cursor(cur++);
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteData(6);
     e10:	88 e0       	ldi	r24, 0x08	; 8
     e12:	e6 e0       	ldi	r30, 0x06	; 6
     e14:	f1 e0       	ldi	r31, 0x01	; 1
}
     e16:	de 01       	movw	r26, r28
     e18:	11 96       	adiw	r26, 0x01	; 1
     e1a:	01 90       	ld	r0, Z+
     e1c:	0d 92       	st	X+, r0
     e1e:	8a 95       	dec	r24
     e20:	e1 f7       	brne	.-8      	; 0xe1a <dispBottomLeft+0x1e>
     e22:	88 e0       	ldi	r24, 0x08	; 8
     e24:	e6 e2       	ldi	r30, 0x26	; 38
     e26:	f1 e0       	ldi	r31, 0x01	; 1
void dispBottomLeft(){
	// TIME highlighted in the bottom left
	
	unsigned char selE[8] = {0x1f, 0x11, 0x17, 0x13, 0x17, 0x11, 0x1f, 0x00};
	unsigned char selM[8] = {0x1f, 0x15, 0x11, 0x11, 0x15, 0x15, 0x1f, 0x00};
     e28:	de 01       	movw	r26, r28
     e2a:	19 96       	adiw	r26, 0x09	; 9
     e2c:	01 90       	ld	r0, Z+
     e2e:	0d 92       	st	X+, r0
     e30:	8a 95       	dec	r24
     e32:	e1 f7       	brne	.-8      	; 0xe2c <dispBottomLeft+0x30>
	unsigned char selI[8] = {0x1f, 0x11, 0x1b, 0x1b, 0x1b, 0x11, 0x1f, 0x00};
     e34:	88 e0       	ldi	r24, 0x08	; 8
     e36:	e6 e3       	ldi	r30, 0x36	; 54
     e38:	f1 e0       	ldi	r31, 0x01	; 1
     e3a:	de 01       	movw	r26, r28
     e3c:	51 96       	adiw	r26, 0x11	; 17
     e3e:	01 90       	ld	r0, Z+
     e40:	0d 92       	st	X+, r0
     e42:	8a 95       	dec	r24
     e44:	e1 f7       	brne	.-8      	; 0xe3e <dispBottomLeft+0x42>
	unsigned char selT[8] = {0x1f, 0x11, 0x1b, 0x1b, 0x1b, 0x1b, 0x1f, 0x00};
     e46:	88 e0       	ldi	r24, 0x08	; 8
     e48:	ee e6       	ldi	r30, 0x6E	; 110
     e4a:	f1 e0       	ldi	r31, 0x01	; 1
     e4c:	de 01       	movw	r26, r28
     e4e:	59 96       	adiw	r26, 0x19	; 25
     e50:	01 90       	ld	r0, Z+
     e52:	0d 92       	st	X+, r0
     e54:	8a 95       	dec	r24
     e56:	e1 f7       	brne	.-8      	; 0xe50 <dispBottomLeft+0x54>
	
	LCD_Custom_Char(0, selT);		// build T at position 0...
     e58:	be 01       	movw	r22, r28
     e5a:	67 5e       	subi	r22, 0xE7	; 231
     e5c:	7f 4f       	sbci	r23, 0xFF	; 255
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	e3 d9       	rcall	.-3130   	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(1, selI);
     e62:	be 01       	movw	r22, r28
     e64:	6f 5e       	subi	r22, 0xEF	; 239
     e66:	7f 4f       	sbci	r23, 0xFF	; 255
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	de d9       	rcall	.-3140   	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(2, selM);
     e6c:	be 01       	movw	r22, r28
     e6e:	67 5f       	subi	r22, 0xF7	; 247
     e70:	7f 4f       	sbci	r23, 0xFF	; 255
     e72:	82 e0       	ldi	r24, 0x02	; 2
     e74:	d9 d9       	rcall	.-3150   	; 0x228 <LCD_Custom_Char>
	LCD_Custom_Char(3, selE);
     e76:	be 01       	movw	r22, r28
     e78:	6f 5f       	subi	r22, 0xFF	; 255
     e7a:	7f 4f       	sbci	r23, 0xFF	; 255
     e7c:	83 e0       	ldi	r24, 0x03	; 3
	
	unsigned char cur = 1;		// initialize cursor to 1
	
	LCD_Cursor(cur++);
     e7e:	d4 d9       	rcall	.-3160   	; 0x228 <LCD_Custom_Char>
     e80:	81 e0       	ldi	r24, 0x01	; 1
	LCD_WriteData('P');
     e82:	41 d9       	rcall	.-3454   	; 0x106 <LCD_Cursor>
     e84:	80 e5       	ldi	r24, 0x50	; 80
	LCD_Cursor(cur++);
     e86:	56 d9       	rcall	.-3412   	; 0x134 <LCD_WriteData>
     e88:	82 e0       	ldi	r24, 0x02	; 2
	LCD_WriteData('L');
     e8a:	3d d9       	rcall	.-3462   	; 0x106 <LCD_Cursor>
     e8c:	8c e4       	ldi	r24, 0x4C	; 76
	LCD_Cursor(cur++);
     e8e:	52 d9       	rcall	.-3420   	; 0x134 <LCD_WriteData>
     e90:	83 e0       	ldi	r24, 0x03	; 3
	LCD_WriteData('A');
     e92:	39 d9       	rcall	.-3470   	; 0x106 <LCD_Cursor>
     e94:	81 e4       	ldi	r24, 0x41	; 65
	LCD_Cursor(cur++);
     e96:	4e d9       	rcall	.-3428   	; 0x134 <LCD_WriteData>
     e98:	84 e0       	ldi	r24, 0x04	; 4
	LCD_WriteData('Y');
     e9a:	35 d9       	rcall	.-3478   	; 0x106 <LCD_Cursor>
     e9c:	89 e5       	ldi	r24, 0x59	; 89
	LCD_Cursor(cur++);
     e9e:	4a d9       	rcall	.-3436   	; 0x134 <LCD_WriteData>
     ea0:	85 e0       	ldi	r24, 0x05	; 5
	LCD_WriteData(' ');
     ea2:	31 d9       	rcall	.-3486   	; 0x106 <LCD_Cursor>
     ea4:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     ea6:	46 d9       	rcall	.-3444   	; 0x134 <LCD_WriteData>
     ea8:	86 e0       	ldi	r24, 0x06	; 6
	LCD_WriteData(' ');
     eaa:	2d d9       	rcall	.-3494   	; 0x106 <LCD_Cursor>
     eac:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     eae:	42 d9       	rcall	.-3452   	; 0x134 <LCD_WriteData>
     eb0:	87 e0       	ldi	r24, 0x07	; 7
	LCD_WriteData('D');
     eb2:	29 d9       	rcall	.-3502   	; 0x106 <LCD_Cursor>
     eb4:	84 e4       	ldi	r24, 0x44	; 68
	LCD_Cursor(cur++);
     eb6:	3e d9       	rcall	.-3460   	; 0x134 <LCD_WriteData>
     eb8:	88 e0       	ldi	r24, 0x08	; 8
	LCD_WriteData('I');
     eba:	25 d9       	rcall	.-3510   	; 0x106 <LCD_Cursor>
     ebc:	89 e4       	ldi	r24, 0x49	; 73
	LCD_Cursor(cur++);
     ebe:	3a d9       	rcall	.-3468   	; 0x134 <LCD_WriteData>
     ec0:	89 e0       	ldi	r24, 0x09	; 9
	LCD_WriteData('F');
     ec2:	21 d9       	rcall	.-3518   	; 0x106 <LCD_Cursor>
     ec4:	86 e4       	ldi	r24, 0x46	; 70
	LCD_Cursor(cur++);
     ec6:	36 d9       	rcall	.-3476   	; 0x134 <LCD_WriteData>
     ec8:	8a e0       	ldi	r24, 0x0A	; 10
	LCD_WriteData('F');
     eca:	1d d9       	rcall	.-3526   	; 0x106 <LCD_Cursor>
     ecc:	86 e4       	ldi	r24, 0x46	; 70
	LCD_Cursor(cur++);
     ece:	32 d9       	rcall	.-3484   	; 0x134 <LCD_WriteData>
     ed0:	8b e0       	ldi	r24, 0x0B	; 11
	LCD_WriteData('I');
     ed2:	19 d9       	rcall	.-3534   	; 0x106 <LCD_Cursor>
     ed4:	89 e4       	ldi	r24, 0x49	; 73
	LCD_Cursor(cur++);
     ed6:	2e d9       	rcall	.-3492   	; 0x134 <LCD_WriteData>
     ed8:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_WriteData('C');
     eda:	15 d9       	rcall	.-3542   	; 0x106 <LCD_Cursor>
     edc:	83 e4       	ldi	r24, 0x43	; 67
	LCD_Cursor(cur++);
     ede:	2a d9       	rcall	.-3500   	; 0x134 <LCD_WriteData>
     ee0:	8d e0       	ldi	r24, 0x0D	; 13
	LCD_WriteData('U');
     ee2:	11 d9       	rcall	.-3550   	; 0x106 <LCD_Cursor>
     ee4:	85 e5       	ldi	r24, 0x55	; 85
	LCD_Cursor(cur++);
     ee6:	26 d9       	rcall	.-3508   	; 0x134 <LCD_WriteData>
     ee8:	8e e0       	ldi	r24, 0x0E	; 14
	LCD_WriteData('L');
     eea:	0d d9       	rcall	.-3558   	; 0x106 <LCD_Cursor>
     eec:	8c e4       	ldi	r24, 0x4C	; 76
	LCD_Cursor(cur++);
     eee:	22 d9       	rcall	.-3516   	; 0x134 <LCD_WriteData>
     ef0:	8f e0       	ldi	r24, 0x0F	; 15
	LCD_WriteData('T');
     ef2:	09 d9       	rcall	.-3566   	; 0x106 <LCD_Cursor>
     ef4:	84 e5       	ldi	r24, 0x54	; 84
	LCD_Cursor(cur++);
     ef6:	1e d9       	rcall	.-3524   	; 0x134 <LCD_WriteData>
     ef8:	80 e1       	ldi	r24, 0x10	; 16
	LCD_WriteData('Y');
     efa:	05 d9       	rcall	.-3574   	; 0x106 <LCD_Cursor>
     efc:	89 e5       	ldi	r24, 0x59	; 89
	LCD_Cursor(cur++);		// Newline here
     efe:	1a d9       	rcall	.-3532   	; 0x134 <LCD_WriteData>
     f00:	81 e1       	ldi	r24, 0x11	; 17
	LCD_WriteData(0);
     f02:	01 d9       	rcall	.-3582   	; 0x106 <LCD_Cursor>
     f04:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Cursor(cur++);
     f06:	16 d9       	rcall	.-3540   	; 0x134 <LCD_WriteData>
     f08:	82 e1       	ldi	r24, 0x12	; 18
	LCD_WriteData(1);
     f0a:	fd d8       	rcall	.-3590   	; 0x106 <LCD_Cursor>
     f0c:	81 e0       	ldi	r24, 0x01	; 1
	LCD_Cursor(cur++);
     f0e:	12 d9       	rcall	.-3548   	; 0x134 <LCD_WriteData>
     f10:	83 e1       	ldi	r24, 0x13	; 19
	LCD_WriteData(2);
     f12:	f9 d8       	rcall	.-3598   	; 0x106 <LCD_Cursor>
     f14:	82 e0       	ldi	r24, 0x02	; 2
	LCD_Cursor(cur++);
     f16:	0e d9       	rcall	.-3556   	; 0x134 <LCD_WriteData>
     f18:	84 e1       	ldi	r24, 0x14	; 20
	LCD_WriteData(3);
     f1a:	f5 d8       	rcall	.-3606   	; 0x106 <LCD_Cursor>
     f1c:	83 e0       	ldi	r24, 0x03	; 3
	LCD_Cursor(cur++);
     f1e:	0a d9       	rcall	.-3564   	; 0x134 <LCD_WriteData>
     f20:	85 e1       	ldi	r24, 0x15	; 21
	LCD_WriteData(' ');
     f22:	f1 d8       	rcall	.-3614   	; 0x106 <LCD_Cursor>
     f24:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     f26:	06 d9       	rcall	.-3572   	; 0x134 <LCD_WriteData>
     f28:	86 e1       	ldi	r24, 0x16	; 22
     f2a:	ed d8       	rcall	.-3622   	; 0x106 <LCD_Cursor>
	LCD_WriteData(' ');
     f2c:	80 e2       	ldi	r24, 0x20	; 32
     f2e:	02 d9       	rcall	.-3580   	; 0x134 <LCD_WriteData>
     f30:	87 e1       	ldi	r24, 0x17	; 23
	LCD_Cursor(cur++);
     f32:	e9 d8       	rcall	.-3630   	; 0x106 <LCD_Cursor>
     f34:	80 e2       	ldi	r24, 0x20	; 32
     f36:	fe d8       	rcall	.-3588   	; 0x134 <LCD_WriteData>
	LCD_WriteData(' ');
     f38:	88 e1       	ldi	r24, 0x18	; 24
     f3a:	e5 d8       	rcall	.-3638   	; 0x106 <LCD_Cursor>
     f3c:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     f3e:	fa d8       	rcall	.-3596   	; 0x134 <LCD_WriteData>
     f40:	89 e1       	ldi	r24, 0x19	; 25
     f42:	e1 d8       	rcall	.-3646   	; 0x106 <LCD_Cursor>
	LCD_WriteData(' ');
     f44:	80 e2       	ldi	r24, 0x20	; 32
     f46:	f6 d8       	rcall	.-3604   	; 0x134 <LCD_WriteData>
     f48:	8a e1       	ldi	r24, 0x1A	; 26
	LCD_Cursor(cur++);
     f4a:	dd d8       	rcall	.-3654   	; 0x106 <LCD_Cursor>
     f4c:	82 e3       	ldi	r24, 0x32	; 50
     f4e:	f2 d8       	rcall	.-3612   	; 0x134 <LCD_WriteData>
	LCD_WriteData(' ');
     f50:	8b e1       	ldi	r24, 0x1B	; 27
     f52:	d9 d8       	rcall	.-3662   	; 0x106 <LCD_Cursor>
     f54:	80 e5       	ldi	r24, 0x50	; 80
	LCD_Cursor(cur++);
     f56:	ee d8       	rcall	.-3620   	; 0x134 <LCD_WriteData>
     f58:	8c e1       	ldi	r24, 0x1C	; 28
     f5a:	d5 d8       	rcall	.-3670   	; 0x106 <LCD_Cursor>
	LCD_WriteData('2');
     f5c:	8c e4       	ldi	r24, 0x4C	; 76
     f5e:	ea d8       	rcall	.-3628   	; 0x134 <LCD_WriteData>
     f60:	8d e1       	ldi	r24, 0x1D	; 29
	LCD_Cursor(cur++);
     f62:	d1 d8       	rcall	.-3678   	; 0x106 <LCD_Cursor>
     f64:	81 e4       	ldi	r24, 0x41	; 65
     f66:	e6 d8       	rcall	.-3636   	; 0x134 <LCD_WriteData>
	LCD_WriteData('P');
     f68:	8e e1       	ldi	r24, 0x1E	; 30
     f6a:	cd d8       	rcall	.-3686   	; 0x106 <LCD_Cursor>
     f6c:	89 e5       	ldi	r24, 0x59	; 89
	LCD_Cursor(cur++);
     f6e:	e2 d8       	rcall	.-3644   	; 0x134 <LCD_WriteData>
     f70:	8f e1       	ldi	r24, 0x1F	; 31
     f72:	c9 d8       	rcall	.-3694   	; 0x106 <LCD_Cursor>
	LCD_WriteData('L');
     f74:	85 e4       	ldi	r24, 0x45	; 69
     f76:	de d8       	rcall	.-3652   	; 0x134 <LCD_WriteData>
     f78:	80 e2       	ldi	r24, 0x20	; 32
	LCD_Cursor(cur++);
     f7a:	c5 d8       	rcall	.-3702   	; 0x106 <LCD_Cursor>
     f7c:	82 e5       	ldi	r24, 0x52	; 82
     f7e:	da d8       	rcall	.-3660   	; 0x134 <LCD_WriteData>
	LCD_WriteData('A');
     f80:	a0 96       	adiw	r28, 0x20	; 32
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
	LCD_Cursor(cur++);
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteData('Y');
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	08 95       	ret

00000f92 <displayMenu>:
	LCD_Cursor(cur++);
     f92:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <mm>
     f96:	82 30       	cpi	r24, 0x02	; 2
	LCD_WriteData('E');
     f98:	d9 f0       	breq	.+54     	; 0xfd0 <displayMenu+0x3e>
     f9a:	28 f4       	brcc	.+10     	; 0xfa6 <displayMenu+0x14>
     f9c:	88 23       	and	r24, r24
	LCD_Cursor(cur++);
     f9e:	41 f0       	breq	.+16     	; 0xfb0 <displayMenu+0x1e>
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	51 f0       	breq	.+20     	; 0xfb8 <displayMenu+0x26>
	LCD_WriteData('R');
     fa4:	43 c0       	rjmp	.+134    	; 0x102c <displayMenu+0x9a>
     fa6:	83 30       	cpi	r24, 0x03	; 3
     fa8:	49 f1       	breq	.+82     	; 0xffc <displayMenu+0x6a>
}
     faa:	84 30       	cpi	r24, 0x04	; 4
     fac:	99 f1       	breq	.+102    	; 0x1014 <displayMenu+0x82>
     fae:	3e c0       	rjmp	.+124    	; 0x102c <displayMenu+0x9a>
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <mm>
     fb6:	3d c0       	rjmp	.+122    	; 0x1032 <displayMenu+0xa0>
     fb8:	01 99       	sbic	0x00, 1	; 0
     fba:	04 c0       	rjmp	.+8      	; 0xfc4 <displayMenu+0x32>
		case init:
			mm = topLeft;
		break;
		case topLeft:
			if(!GetBit(PINA, 1)){
				mm = topRight;
     fbc:	82 e0       	ldi	r24, 0x02	; 2
     fbe:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <mm>
     fc2:	39 c0       	rjmp	.+114    	; 0x1036 <displayMenu+0xa4>
			}
			else if(!GetBit(PINA, 2)){
     fc4:	02 99       	sbic	0x00, 2	; 0
     fc6:	35 c0       	rjmp	.+106    	; 0x1032 <displayMenu+0xa0>
				mm = bottomLeft;
     fc8:	83 e0       	ldi	r24, 0x03	; 3
     fca:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <mm>
     fce:	35 c0       	rjmp	.+106    	; 0x103a <displayMenu+0xa8>
			else{
				mm = topLeft;
			}
		break;
		case topRight:
			if(!GetBit(PINA, 3)){	// left
     fd0:	03 99       	sbic	0x00, 3	; 0
     fd2:	04 c0       	rjmp	.+8      	; 0xfdc <displayMenu+0x4a>
				mm = topLeft;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <mm>
     fda:	2b c0       	rjmp	.+86     	; 0x1032 <displayMenu+0xa0>
			}
			else if(!GetBit(PINA, 2)){	// down
     fdc:	02 99       	sbic	0x00, 2	; 0
     fde:	04 c0       	rjmp	.+8      	; 0xfe8 <displayMenu+0x56>
				mm = bottomRight;
     fe0:	84 e0       	ldi	r24, 0x04	; 4
     fe2:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <mm>
     fe6:	2b c0       	rjmp	.+86     	; 0x103e <displayMenu+0xac>
			}
			else if(!GetBit(PINA, 4)){	// select 'difficulty'
     fe8:	04 99       	sbic	0x00, 4	; 0
     fea:	25 c0       	rjmp	.+74     	; 0x1036 <displayMenu+0xa4>
				while(!GetBit(PINA, 4));	// wait for release
     fec:	04 9b       	sbis	0x00, 4	; 0
     fee:	fe cf       	rjmp	.-4      	; 0xfec <displayMenu+0x5a>
				inMenu = 0;	// no longer in menu
     ff0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
				inDifficulty = 1;	// in difficulty menu
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__data_end>
     ffa:	1d c0       	rjmp	.+58     	; 0x1036 <displayMenu+0xa4>
			else{
				mm = topRight;
			}
		break;
		case bottomLeft:
			if(!GetBit(PINA, 0)){
     ffc:	00 99       	sbic	0x00, 0	; 0
     ffe:	04 c0       	rjmp	.+8      	; 0x1008 <displayMenu+0x76>
				mm = topLeft;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <mm>
    1006:	15 c0       	rjmp	.+42     	; 0x1032 <displayMenu+0xa0>
			}
			else if(!GetBit(PINA, 1)){
    1008:	01 99       	sbic	0x00, 1	; 0
    100a:	17 c0       	rjmp	.+46     	; 0x103a <displayMenu+0xa8>
				mm = bottomRight;
    100c:	84 e0       	ldi	r24, 0x04	; 4
    100e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <mm>
    1012:	15 c0       	rjmp	.+42     	; 0x103e <displayMenu+0xac>
			else{
				mm = bottomLeft;
			}
		break;
		case bottomRight:
			if(!GetBit(PINA, 0)){
    1014:	00 99       	sbic	0x00, 0	; 0
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <displayMenu+0x8e>
				mm = topRight;
    1018:	82 e0       	ldi	r24, 0x02	; 2
    101a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <mm>
    101e:	0b c0       	rjmp	.+22     	; 0x1036 <displayMenu+0xa4>
			}
			else if(!GetBit(PINA, 3)){
    1020:	03 99       	sbic	0x00, 3	; 0
    1022:	0d c0       	rjmp	.+26     	; 0x103e <displayMenu+0xac>
				mm = bottomLeft;
    1024:	83 e0       	ldi	r24, 0x03	; 3
    1026:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <mm>
    102a:	07 c0       	rjmp	.+14     	; 0x103a <displayMenu+0xa8>
			else{
				mm = bottomRight;
			}
		break;
		default:
			mm = topLeft;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <mm>
	switch(mm){			// actions
		case init:
			dispTopLeft();
		break;
		case topLeft:
			dispTopLeft();
    1032:	24 cd       	rjmp	.-1464   	; 0xa7c <dispTopLeft>
		break;
		case topRight:
			dispTopRight();
    1034:	08 95       	ret
		break;
    1036:	1d cc       	rjmp	.-1990   	; 0x872 <dispTopRight>
		case bottomLeft:
			dispBottomLeft();
    1038:	08 95       	ret
		break;
    103a:	e0 ce       	rjmp	.-576    	; 0xdfc <dispBottomLeft>
		case bottomRight:
			dispBottomRight();
    103c:	08 95       	ret
    103e:	e9 cd       	rjmp	.-1070   	; 0xc12 <dispBottomRight>
    1040:	08 95       	ret

00001042 <main>:
		break;
	}
}

int main() {
	DDRA = 0x00; PORTA = 0xFF; // A input
    1042:	11 b8       	out	0x01, r1	; 1
    1044:	8f ef       	ldi	r24, 0xFF	; 255
    1046:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // B output
    1048:	84 b9       	out	0x04, r24	; 4
    104a:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00; // LCD control lines (output)
    104c:	8a b9       	out	0x0a, r24	; 10
    104e:	1b b8       	out	0x0b, r1	; 11

	LCD_init();
    1050:	62 d8       	rcall	.-3900   	; 0x116 <LCD_init>
	
	LCD_WriteCommand(0x38); /* function set */
    1052:	88 e3       	ldi	r24, 0x38	; 56
    1054:	4c d8       	rcall	.-3944   	; 0xee <LCD_WriteCommand>
	LCD_WriteCommand(0x0c); /* display on,cursor off,blink off */
    1056:	8c e0       	ldi	r24, 0x0C	; 12
    1058:	4a d8       	rcall	.-3948   	; 0xee <LCD_WriteCommand>
    105a:	61 e0       	ldi	r22, 0x01	; 1
	TimerSet(1);	// until we start blinking lights, no need to set timer just yet
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	71 d8       	rcall	.-3870   	; 0x146 <TimerSet>
	TimerOn(); 
    1064:	81 d8       	rcall	.-3838   	; 0x168 <TimerOn>
	
	mm = init;
    1066:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <mm>
	diff = initDif;
    106a:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <diff>
	
	LCD_ClearScreen();
    106e:	48 d8       	rcall	.-3952   	; 0x100 <LCD_ClearScreen>
    1070:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
	while(1){	
		if(inMenu){
    1074:	81 11       	cpse	r24, r1
    1076:	8d df       	rcall	.-230    	; 0xf92 <displayMenu>
			displayMenu();
    1078:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__data_end>
		}
		if(inDifficulty){
    107c:	81 11       	cpse	r24, r1
			setDifficulty();
    107e:	5c db       	rcall	.-2376   	; 0x738 <setDifficulty>
    1080:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <TimerFlag>
		}
		
		while(!TimerFlag);
    1084:	88 23       	and	r24, r24
    1086:	e1 f3       	breq	.-8      	; 0x1080 <main+0x3e>
    1088:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <TimerFlag>
		TimerFlag = 0;
    108c:	f1 cf       	rjmp	.-30     	; 0x1070 <main+0x2e>

0000108e <_exit>:
	}
    108e:	f8 94       	cli

00001090 <__stop_program>:
    1090:	ff cf       	rjmp	.-2      	; 0x1090 <__stop_program>

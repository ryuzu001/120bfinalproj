
GccApplication10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000224  000002b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000224  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010c  0080010c  000002c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c79  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ba  00000000  00000000  00001035  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a5  00000000  00000000  000018ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00001d94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ea  00000000  00000000  00001ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003bb  00000000  00000000  000023ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002785  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7d c0       	rjmp	.+250    	; 0x130 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e2       	ldi	r30, 0x24	; 36
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 31       	cpi	r26, 0x11	; 17
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8b d0       	rcall	.+278    	; 0x1da <main>
  c4:	ad c0       	rjmp	.+346    	; 0x220 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	10 98       	cbi	0x02, 0	; 2
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	11 9a       	sbi	0x02, 1	; 2
  f4:	00 00       	nop
  f6:	11 98       	cbi	0x02, 1	; 2
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_init>:
 100:	84 e6       	ldi	r24, 0x64	; 100
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	e1 df       	rcall	.-62     	; 0xc8 <delay_ms>
 106:	88 e3       	ldi	r24, 0x38	; 56
 108:	f2 df       	rcall	.-28     	; 0xee <LCD_WriteCommand>
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	f0 df       	rcall	.-32     	; 0xee <LCD_WriteCommand>
 10e:	8f e0       	ldi	r24, 0x0F	; 15
 110:	ee df       	rcall	.-36     	; 0xee <LCD_WriteCommand>
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	ec df       	rcall	.-40     	; 0xee <LCD_WriteCommand>
 116:	8a e0       	ldi	r24, 0x0A	; 10
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 cf       	rjmp	.-84     	; 0xc8 <delay_ms>
 11c:	08 95       	ret

0000011e <LCD_WriteData>:
 11e:	10 9a       	sbi	0x02, 0	; 2
 120:	8b b9       	out	0x0b, r24	; 11
 122:	11 9a       	sbi	0x02, 1	; 2
 124:	00 00       	nop
 126:	11 98       	cbi	0x02, 1	; 2
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	cd cf       	rjmp	.-102    	; 0xc8 <delay_ms>
 12e:	08 95       	ret

00000130 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 142:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 146:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 14a:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <__data_end+0x2>
 14e:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <__data_end+0x3>
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	a1 09       	sbc	r26, r1
 156:	b1 09       	sbc	r27, r1
 158:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 15c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 160:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_end+0x2>
 164:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 168:	89 2b       	or	r24, r25
 16a:	8a 2b       	or	r24, r26
 16c:	8b 2b       	or	r24, r27
 16e:	99 f4       	brne	.+38     	; 0x196 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 176:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 17a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 17e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 182:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 186:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 18a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 18e:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_end+0x2>
 192:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_end+0x3>
	}
}
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <LCD_Custom_Char>:

char hello[50] = "Hello World abcdefghijklmnop";
char world[50] = "World!";

void LCD_Custom_Char (unsigned char loc, unsigned char *msg)
{
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	8b 01       	movw	r16, r22
	int i;
	LCD_WriteCommand (0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
 1b2:	88 0f       	add	r24, r24
 1b4:	88 0f       	add	r24, r24
 1b6:	88 0f       	add	r24, r24
 1b8:	80 5c       	subi	r24, 0xC0	; 192
 1ba:	99 df       	rcall	.-206    	; 0xee <LCD_WriteCommand>
 1bc:	e8 01       	movw	r28, r16
 1be:	09 5f       	subi	r16, 0xF9	; 249
 1c0:	1f 4f       	sbci	r17, 0xFF	; 255
	for(i=0;i<7;i++){	/* Write 8 byte for generation of 1 character */
		LCD_WriteData(msg[i]);
 1c2:	89 91       	ld	r24, Y+
 1c4:	ac df       	rcall	.-168    	; 0x11e <LCD_WriteData>

void LCD_Custom_Char (unsigned char loc, unsigned char *msg)
{
	int i;
	LCD_WriteCommand (0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
	for(i=0;i<7;i++){	/* Write 8 byte for generation of 1 character */
 1c6:	c0 17       	cp	r28, r16
 1c8:	d1 07       	cpc	r29, r17
		LCD_WriteData(msg[i]);
	}
	LCD_WriteCommand(0x80);
 1ca:	d9 f7       	brne	.-10     	; 0x1c2 <LCD_Custom_Char+0x1a>
 1cc:	80 e8       	ldi	r24, 0x80	; 128
 1ce:	8f df       	rcall	.-226    	; 0xee <LCD_WriteCommand>
}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	08 95       	ret

000001da <main>:

int main() {
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
 1e2:	27 97       	sbiw	r28, 0x07	; 7
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	f8 94       	cli
 1e8:	de bf       	out	0x3e, r29	; 62
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF; PORTA = 0x00;
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	81 b9       	out	0x01, r24	; 1
 1f2:	12 b8       	out	0x02, r1	; 2
	DDRD = 0xFF; PORTD = 0x00; // LCD control lines
 1f4:	8a b9       	out	0x0a, r24	; 10
 1f6:	1b b8       	out	0x0b, r1	; 11
	
	// Initializes the LCD display
	//unsigned char Character1[8] = { 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00 }; 
	// unsigned char Character1;
	unsigned char battery[7] = {0x0e, 0x0a, 0x1b, 0x11, 0x11, 0x11, 0x1f};
 1f8:	87 e0       	ldi	r24, 0x07	; 7
 1fa:	e4 e0       	ldi	r30, 0x04	; 4
 1fc:	f1 e0       	ldi	r31, 0x01	; 1
 1fe:	de 01       	movw	r26, r28
 200:	11 96       	adiw	r26, 0x01	; 1
 202:	01 90       	ld	r0, Z+
 204:	0d 92       	st	X+, r0
 206:	8a 95       	dec	r24
 208:	e1 f7       	brne	.-8      	; 0x202 <main+0x28>
	/* Custom char set for alphanumeric LCD Module */
	
	
	
	LCD_init();
 20a:	7a df       	rcall	.-268    	; 0x100 <LCD_init>
	
	LCD_WriteCommand(0x00);
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	6f df       	rcall	.-290    	; 0xee <LCD_WriteCommand>
	LCD_Custom_Char(0, battery);  /* Build Character1 at position 0 */
 210:	be 01       	movw	r22, r28
 212:	6f 5f       	subi	r22, 0xFF	; 255
 214:	7f 4f       	sbci	r23, 0xFF	; 255
 216:	80 e0       	ldi	r24, 0x00	; 0
	LCD_WriteData(0);
 218:	c7 df       	rcall	.-114    	; 0x1a8 <LCD_Custom_Char>
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	80 df       	rcall	.-256    	; 0x11e <LCD_WriteData>
 21e:	ff cf       	rjmp	.-2      	; 0x21e <main+0x44>

00000220 <_exit>:
 220:	f8 94       	cli

00000222 <__stop_program>:
 222:	ff cf       	rjmp	.-2      	; 0x222 <__stop_program>
